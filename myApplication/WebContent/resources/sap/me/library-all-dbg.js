// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.me.library-all');
if ( !jQuery.sap.isDeclared('sap.me.CalendarLegendRenderer') ) {

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.me.CalendarLegendRenderer");

/**
 * @class CalendarLegend renderer. 
 * @static
 */
sap.me.CalendarLegendRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.me.CalendarLegendRenderer.render = function(oRm, oControl){ 
	 // write the HTML into the render manager
 	var labelsArr = oControl.getAggregation("labels");
	if(oControl.getVisible() && labelsArr && labelsArr.length >0){
	var myStyles = "";
	// Style for width
	var sWidth = oControl.getWidth();
	if(sWidth) {
		myStyles += "width:" + sWidth + ";";
	}
	 oRm.write("<div"); // outer container	
	 oRm.writeControlData(oControl);
	 oRm.addClass("sapUIMeLegendOuterContainer");
	 oRm.writeAttribute("style", myStyles);
	 oRm.writeClasses();
	 oRm.write(">");
	 oRm.write("<div");
	 oRm.addClass("sapMeCalendarLegend");
	 oRm.addClass("sapMeCalendarLegend"+oControl.getDesign());
	 oRm.writeClasses();
	 oRm.write(">"); // div element
	 oRm.write("<div  id='" + oControl.getId() + "-arrow'"); //legend header
	 oRm.addClass("sapUIMeLegend");
	 oRm.writeClasses();
	 oRm.write(">");
	 if(oControl.getExpandable()){
		 oRm.renderControl(oControl.getAggregation("icon"));
	 }
	 oRm.write("<div id='" + oControl.getId() + "-LegendMenuContainer'"); //legend menu container
	 oRm.addClass("sapUIMeLegendMenuContainer");
	 oRm.writeClasses();
	 oRm.write(">");
		 oRm.write("<div id='" + oControl.getId() + "-LegendMenu'"); //legend menu container
		 oRm.addClass("sapUIMeLegendMenu");
		 if(!oControl.getExpanded()){
			 oRm.write("style = 'display:none'");
		 }
		 oRm.writeClasses();
		 oRm.write(">");
		 var w = oControl.getLegendWidth();
		for ( var i = 0; i < labelsArr.length; i++) {
				oRm.write("<div "); //legend line
				oRm.addClass("sapUIMeLegendLine");
				oRm.writeClasses();
				/*
				oRm.addStyle("min-width",w);
				oRm.writeStyles();
				*/	
				oRm.write(">");
				oRm.write("<div "); //legend color
				oRm.addClass("sapUIMeLegendColor");
				oRm.addClass(oControl._getColorBoxStyle(labelsArr[i].getId()));
				oRm.writeClasses();	
				oRm.write("></div>"); // legend color
				oRm.renderControl(labelsArr[i]);
				oRm.write("</div>");//legend line
		}
		oRm.write("</div>");//legend menu 
		oRm.write("</div>");//legend menu container
	 oRm.write("</div>");//legend header
	 oRm.write("</div>");
	 oRm.write("</div>");// outer container

	}
};

}; // end of sap/me/CalendarLegendRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.CalendarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.me.CalendarRenderer");

/**
 * @class Calendar renderer. 
 * @static
 */
sap.me.CalendarRenderer = {
};

sap.me.CalendarRenderer.render = function (oRm, oControl) {
	if(!oControl.getVisible())
		return;
		
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addClass("sapMeCalendar");
    var sClass = "sapMeCalendar" + oControl.getDesign(); 
    oRm.addClass(sClass);
    oRm.writeClasses();
    var w = oControl.getWidth();
    if( w != undefined ){
        oRm.addStyle("width", w);
        oRm.writeStyles();
    }
    oRm.write(">");

    oRm.renderControl(oControl._oPrevBtn);
    oRm.renderControl(oControl._oNextBtn);

    var bSingleRow = oControl.getSingleRow();

	var sCurrentDate = oControl.getCurrentDate();
    var iMonths = bSingleRow ? 1 : oControl.getMonthsToDisplay();
    var oNow = new Date();
    var sNow = oNow.toDateString(); // so it is same time as other dates
    
    if(iMonths===1){
    	this._renderMonth(oRm, oControl, sCurrentDate, sNow);
    }
    else{
        var currentDate = new Date(sCurrentDate);
        var iMonthToGoBack = Math.floor(iMonths/2);        
        for(var i=0;i<iMonthToGoBack;i++){ // we go first back in time
        	currentDate.setDate(0); // last day of month
        	currentDate.setDate(1); // go to its first day
        }
        for(var i=0;i<iMonths;i++){
        	this._renderMonth(oRm, oControl, currentDate.toDateString(), sNow);
        	currentDate.setDate(32); // go to next month
        	currentDate.setDate(1); // go to its first day
        }
    }
    
    oRm.write("</div>"); // sapMeCalendar DIV
};


sap.me.CalendarRenderer._renderMonth = function(oRm, oControl, sMonthDate, sDateNow){
    var bSingleRow = oControl.getSingleRow();
    var iFirstDayOffset = oControl.getFirstDayOffset();
	var aWeekDays = oControl.getDays();
    var iWeekDays = aWeekDays.length;
    var iWeeksPerRow = oControl.getWeeksPerRow();
    var iDaysInRow = iWeeksPerRow * iWeekDays;
    var iDayWidth = (100 / iDaysInRow);
    var iDayHeight = oControl.getDayHeight();
    var iMonthWidth = (100 / (bSingleRow ? 1 : oControl.getMonthsPerRow()));

    var currentDate = new Date(sMonthDate);
    var iCurrentDate = currentDate.getDate();
    var iCurrentDay = currentDate.getDay();


    currentDate.setDate(1); // go to first day of month
    var iMonthFirstDay = currentDate.getDay();
    var iCurrentMonth = currentDate.getMonth();
    var dateForNbOfDaysInThisMonth = new Date(currentDate.getYear(), iCurrentMonth+1, 0);
    var nbOfDaysInThisMonth = dateForNbOfDaysInThisMonth.getDate();
    
    
	var iDaysToGoBack = bSingleRow ? iCurrentDay + 1 - iFirstDayOffset: iCurrentDate + iMonthFirstDay - iFirstDayOffset;	
	
	var nbOfRows = Math.ceil((nbOfDaysInThisMonth + iDaysToGoBack - iCurrentDate) / 7);
	var iTotalDays = bSingleRow ? iDaysInRow : (nbOfRows * 7);
	var aMonths = oControl.getMonths();

	var resBundle = sap.ui.getCore().getLibraryResourceBundle("sap.me");
    var sMonthTitle = resBundle.getText("CALENDAR_TITLE_MONTH_YEAR", [aMonths[currentDate.getMonth()], currentDate.getFullYear()]);
    
    currentDate.setDate(iCurrentDate - iDaysToGoBack + 1);
    if(bSingleRow){
    	var tempDate = new Date(currentDate.getTime());
    	tempDate.setDate(tempDate.getDate() + iTotalDays - 1);
    	var iFirstYear = currentDate.getFullYear();
    	var iLastYear = tempDate.getFullYear();
    	var iFirstMonth = currentDate.getMonth();
    	var iLastMonth = tempDate.getMonth();
    	var iFirstDate = currentDate.getDate();
    	var iLastDate = tempDate.getDate();
    	
    	if(iFirstYear != iLastYear){
    		sMonthTitle = resBundle.getText("CALENDAR_TITLE_WEEK_DISPLAY_ACROSS_2YEARS", [iFirstDate, aMonths[iFirstMonth], iFirstYear, iLastDate, aMonths[iLastMonth], iLastYear]);
    	}
    	else if(iFirstMonth != iLastMonth){
    		sMonthTitle = resBundle.getText("CALENDAR_TITLE_WEEK_DISPLAY_ACROSS_2MONTHS", [iFirstDate, aMonths[iFirstMonth], iLastDate, aMonths[iLastMonth], iLastYear]);
    	}
    	else {
    		sMonthTitle = resBundle.getText("CALENDAR_TITLE_WEEK_DISPLAY_SAME_MONTH", [iFirstDate, iLastDate, aMonths[iLastMonth], iLastYear]);
    	}
    }
    
    oRm.write('<div'); // month div
    oRm.addClass("sapMeCalendarMonth");
    if( !bSingleRow){
    	oRm.addClass("sapMeCalendarMonthNotSingle");
    }
    oRm.writeClasses();
    oRm.addStyle("width", iMonthWidth+"%");
    oRm.writeStyles();
    oRm.write(">");
    
    oRm.write('<div'); // monthname div
    oRm.addClass("sapMeCalendarMonthName");
    oRm.writeClasses();
    if(oControl.getHideMonthTitles()){
        oRm.addStyle("display", "none");
        oRm.writeStyles();
    }
    oRm.write(">");
    oRm.writeEscaped(sMonthTitle);
    oRm.write("</div>"); // monthname
    

    oRm.write('<div'); // MonthDayNames div
    oRm.addClass("sapMeCalendarMonthDayNames");
    oRm.writeClasses();
    oRm.write(">");    
    
    for (var i = 0; i < iDaysInRow; i++) {
    	var sContent = aWeekDays[(i+iFirstDayOffset)%iWeekDays];
        this._renderDay(oRm, oControl, null, sContent, iDayWidth);
    }

    oRm.write('</div>'); // MonthDayNames div

    oRm.write('<div'); // MonthDays div
    oRm.addClass("sapMeCalendarMonthDays");
    oRm.writeClasses();
    oRm.write(">");  
    
    for (var i = 0; i < iTotalDays; i++) { // max days of a month    	
    	var iMonth = currentDate.getMonth();
    	var iDayInWeek = currentDate.getDay();
    	var iCurrentDay = currentDate.getDate();
    	
    	var bNotThisMonth = iMonth !== iCurrentMonth;
    	var sId = currentDate.toDateString();
    	var bIsToday = sId == sDateNow;
        this._renderDay(oRm, oControl,sId, iCurrentDay+"", iDayWidth, iDayHeight, iDayInWeek, bNotThisMonth, bIsToday);
        
        currentDate.setDate(currentDate.getDate()+1);
    }
    
    oRm.write('</div>'); // MonthDays div
    
    oRm.write('</div>'); // month div
};

sap.me.CalendarRenderer._renderDay = function(oRm, oControl, sId, sContent, iDayWidth, iDayHeight, iDayInWeek, bNotThisMonth, bIsToday){
	oRm.write("<div");
    oRm.addClass("sapMeCalendarMonthDay");
    
    if(bIsToday){
    	oRm.addClass("sapMeCalendarDayNow");
    } 
    if(bNotThisMonth && !oControl.getSingleRow() ){
    	oRm.addClass("sapMeCalendarDayNotInCurrentMonth");
    }
    if(typeof iDayInWeek == "number"){
        oRm.addClass("sapMeCalendarWeekDay"+iDayInWeek);
    }
    oRm.writeClasses();
    oRm.addStyle("width", iDayWidth+"%");
    if(iDayHeight){
    	oRm.addStyle("height", iDayHeight+"px");
    }
    oRm.writeStyles();
    oRm.write(">");
    oRm.write('<span>');
    oRm.writeEscaped(sContent);
    oRm.write("</span>");
    oRm.write('<input type="hidden" value="' + sId + '">');
    oRm.write("</span>");
    oRm.write("</div>");
};
}; // end of sap/me/CalendarRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.OverlapCalendarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.me.OverlapCalendarRenderer");

/**
 * @class OverlapCalendar renderer.
 * @static
 */
sap.me.OverlapCalendarRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.me.OverlapCalendarRenderer.render = function(oRm, oControl) {
	if( oControl.getVisible()==false){
		return;
	}
	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMeOverlapCalendar");  
	oRm.writeClasses();
	var w = oControl.getWidth();
    if( w != undefined ){
        oRm.addStyle("width", w);
        oRm.writeStyles();
    }
	oRm.write(">");
	oRm.write("<div");
	oRm.addClass("sapMeOverlapCalendarCalendar");
	oRm.writeClasses();
	oRm.write(">");
	oRm.renderControl(oControl.getCalendar());
	oRm.write("</div>");
	oRm.write("<div");
	oRm.addClass("sapMeOverlapCalendarOverlapIndicator");
	oRm.writeClasses();
	oRm.write(">");
	var iWeekDays = 7;// aWeekDays.length;
	var iWeeksPerRow = oControl.getCalendar().getWeeksPerRow();
	var iDaysInRow = iWeeksPerRow * iWeekDays;
	var date = new Date(oControl.getStartDate());
	var iDayWidth = (100 / iDaysInRow);
	for ( var i = 0; i < iDaysInRow; i++) {
		oRm.write("<div");
		oRm.writeAttribute("id","overlap-"+i);
		oRm.addClass("sapMeOverlapCalendarOverlap");
		oRm.writeClasses();
		oRm.addStyle("width", iDayWidth + "%");
		oRm.writeStyles();
		oRm.write("></div>");
		date.setDate(date.getDate()+1);
	}
	oRm.write("</div>");
	this._renderGrid(oRm, oControl);
	oRm.write("</div>");
};

sap.me.OverlapCalendarRenderer._renderGrid = function(oRm, oControl) {
	// var aWeekDays = oControl._WEEKDAYS;
	var iWeekDays = 7;// aWeekDays.length;
	var iWeeksPerRow = oControl.getCalendar().getWeeksPerRow();
	var iDaysInRow = iWeeksPerRow * iWeekDays;

	var rows =  oControl._aRows;
	if( rows ) {
		var iNumberOfRows = rows.length;

		oRm.write('<div'); // month div
		oRm.addClass("sapMeOverlapCalendarGrid");
		oRm.writeClasses();
		oRm.addStyle("width", "100%");
		oRm.writeStyles();
		oRm.write(">");
		for ( var i = 0; i < iNumberOfRows; i++) {
			if( rows[i] != undefined ) {
				this._renderRow(oRm, oControl, iDaysInRow, i, new Date(oControl.getStartDate()));
			}
		}
	}
	
	// GridDays div

	oRm.write('</div>'); // Grid div
};

sap.me.OverlapCalendarRenderer._renderRow = function(oRm, oControl, iDaysInRow, rowIndex, currentDate) {

	var iDayWidth = (100 / iDaysInRow);	
	var iDayHeight = oControl.getCalendar().getDayHeight();
	oRm.write('<div'); // MonthDays div
	oRm.writeAttribute("id",oControl.getId()+"-row-"+rowIndex);
	oRm.addClass("sapMeOverlapCalendarRow");
	oRm.writeClasses();
	oRm.addStyle("height", iDayHeight + "px");
	oRm.writeStyles();
	oRm.write(">");
	oRm.write('<div'); // Row labels div
	oRm.writeAttribute("id",oControl.getId()+"-row-"+rowIndex+"-lbls");
	oRm.addClass("sapMeOverlapCalendarRowLabels");
	oRm.writeClasses();
	oRm.write(">");
	oRm.renderControl(oControl._getLabelForRow(rowIndex));
	oRm.write('</div>');
	for ( var i = 0; i < iDaysInRow; i++) {
		this._renderDay(oRm, oControl, iDayWidth, iDayHeight, rowIndex, i);

		currentDate.setDate(currentDate.getDate() + 1);
	}
	oRm.write('</div>');
};

sap.me.OverlapCalendarRenderer._renderDay = function(oRm, oControl, iDayWidth, iDayHeight, iRowIndex, iDayIndex) {
	oRm.write("<div");
	oRm.writeAttribute("id", iRowIndex+"-"+iDayIndex);
	oRm.addClass("sapMeOverlapCalendarDay");
	oRm.writeClasses();
	oRm.addStyle("width", iDayWidth + "%");
	if (iDayHeight) {
		oRm.addStyle("height", iDayHeight + "px");
	}
	oRm.writeStyles();
	oRm.write("></div>");
};

}; // end of sap/me/OverlapCalendarRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.ProgressIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.ProgressIndicator
jQuery.sap.declare("sap.me.ProgressIndicatorRenderer");

/**
 * @class ProgressIndicator renderer.
 * @static
 */
sap.me.ProgressIndicatorRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 */
sap.me.ProgressIndicatorRenderer.render = function (oRenderManager, oProgressIndicator) {
	/* For backwards compatibility we can't remove the deprecated sap.me.ProgressIndicator.
	 * However, if the compatibility version is 1.16 or higher then the sap.me.ProgressIndicator
	 * should not be used.
	*/
	var useProgressIndicatorCompatVersion = new jQuery.sap.Version(sap.ui.getCore().getConfiguration().getCompatibilityVersion("sapMeProgressIndicator"));
	if(useProgressIndicatorCompatVersion.compareTo("1.16") >= 0) {
		jQuery.sap.log.error("The sap.me.ProgressIndicator control is not supported as of SAPUI5 version 1.16. Please us sap.m.ProgressIndicator instead.");
		return;
	}

	// .convenience variable
	var rm = oRenderManager;
	var widthControl = oProgressIndicator.getWidth();
	var widthBar = oProgressIndicator.getPercentValue();
	var widthBorder;
	var positionEnd;

	// return immediately if control is invisible
	if (!oProgressIndicator.getVisible()) {
		return;
	}

	if (widthBar > 100) {
		widthBorder = (10000 / widthBar) + '%';
	}
	else {
		widthBorder = '100%';
	}

	// write the HTML into the render manager
	rm.write('<DIV');
	rm.writeControlData(oProgressIndicator);

	rm.writeAttribute('tabIndex', '0');


	if (oProgressIndicator.getWidth() && oProgressIndicator.getWidth() != '') {
		rm.writeAttribute('style', 'width:' + widthControl + ';');
	}

	if (oProgressIndicator.getTooltip_AsString()) {
		rm.writeAttributeEscaped('title', oProgressIndicator.getDisplayValue() + '- ' + oProgressIndicator.getTooltip_AsString());
	}
	else {
		rm.writeAttributeEscaped('title', oProgressIndicator.getDisplayValue());
	}

	rm.addClass('sapUIMeProgInd');
	rm.writeClasses();

	rm.write('>');

	rm.write('<DIV');
	rm.writeAttribute('id', oProgressIndicator.getId() + '-box');

	if (oProgressIndicator.getWidth() && oProgressIndicator.getWidth() != '') {
		rm.writeAttribute('style', 'width:' + widthBorder + ';');
	}

	rm.addClass('sapUIMeProgIndBorder');
	rm.writeClasses();

	rm.write('>');

	rm.write('<DIV');

	rm.writeAttribute('id', oProgressIndicator.getId() + '-bar');
	rm.writeAttribute('onselectstart', "return false");
	rm.writeAttribute('style', 'width:' + oProgressIndicator.getPercentValue() + '%;');

	var sBarColor = oProgressIndicator.getBarColor();
	rm.addClass("sapUIMeProgIndBar");
	if (sBarColor != "") {
		rm.addClass("sapUIMeProgIndBar" + jQuery.sap.escapeHTML(sBarColor));
	}

	rm.writeClasses();

	rm.write('>');

	rm.write('<DIV');
	rm.writeAttribute('id', oProgressIndicator.getId() + '-end');

	// Do not mind about color for the end of the bar
	if (widthBar > 100) {
		rm.addClass('sapUIMeProgIndEnd');
	}
	else {
		rm.addClass('sapUIMeProgIndEndHidden');
	}

	rm.writeClasses();
	rm.writeAttribute('style', 'position: relative; left:' + widthBorder);

	rm.write('>');
	rm.write('</DIV>');

	rm.write('<SPAN');

	rm.addClass('sapUIMeProgIndFont');
	rm.writeClasses();

	rm.write('>');

	if (oProgressIndicator.getShowValue() && oProgressIndicator.getShowValue() == true) {
		if (oProgressIndicator.getDisplayValue() && oProgressIndicator.getDisplayValue() != '') {
			rm.writeEscaped(oProgressIndicator.getDisplayValue());
		}
	}

	rm.write('</SPAN>');
	rm.write('</DIV>');
	rm.write('</DIV>');
	rm.write('</DIV>');
};
}; // end of sap/me/ProgressIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.TabContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.me.TabContainerRenderer");

/**
 * @class TabContainer renderer.
 * @static
 */
sap.me.TabContainerRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.me.TabContainerRenderer.render = function(oRm, oControl) {
	/* For backwards compatibility we can't remove the deprecated TabContainer.
	 * However, if the compatibility version is 1.16 or higher then the TabContainer
	 * should not be used.
	*/
	var useTabContainerCompatVersion = new jQuery.sap.Version(sap.ui.getCore().getConfiguration().getCompatibilityVersion("sapMeTabContainer"));
	if(useTabContainerCompatVersion.compareTo("1.16") >= 0) {
		jQuery.sap.log.error("The sap.me.TabContainer control is not supported as of SAPUI5 version 1.16. Please us sap.m.IconTabBar instead.");
		return;
	}

	// Return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}
	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapUIMeTabContainer");
	oRm.writeClasses();
	oRm.writeStyles();
	oRm.write(">");
	// Buttons
	oRm.write("<div ");
	oRm.addClass("sapUIMeTabContainerButtons");
	oRm.writeClasses();
	oRm.write(">");
	var btn = oControl.getAggregation("tabs");
	var iIndex = oControl.getSelectedTab();
	var badges = oControl.getAggregation("badges");
	if (btn) {
		if (jQuery.isArray(btn)) {
			for ( var i = 0; i < btn.length; i++) {
				var sTabName = btn[i].getCustomData();
				if (oControl._getContentForBtn(btn[i].getId())) { // render button just for tab with content
					oRm.write("<div ");
					oRm.addClass("sapUIMeTabContainerTab");
					if (i === iIndex) {
						oRm.addClass("sapUIMeTabContainerTabSelected");
					}
					oRm.writeClasses();
					oRm.write(">");
					if( badges && badges[i].getText() != ""){
						oRm.renderControl(badges[i]);
					}
					oRm.renderControl(btn[i]);
					oRm.write("</div>");
				}
			}
		} else if (btn) {
			oRm.write("<div ");
			oRm.addClass("sapUIMeTabContainerTab");
			oRm.writeClasses();
			oRm.write(">");
			if( badges && badges[0].getText() != ""){
				oRm.renderControl(badges[0]);
			}
			oRm.renderControl(btn);
			oRm.write("</div>");
		}
	}
	oRm.write("</div>");
	// Content
	var oContent = oControl._getContentForBtn(btn[iIndex].getId());
	if (oContent != undefined) {
		oRm.write("<div ");
		oRm.addClass("sapUIMeTabContainerContent");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("<div id='" + oControl.getId() + "-arrow'");
		oRm.addClass("sapUIMeTabContainerContentArrow");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");
		oRm.write("<div id='" + oControl.getId() + "-container'");
		oRm.write(" style='height:auto'");
		oRm.addClass("sapUIMeTabContainerTabContent");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oContent);
		oRm.write("</div>");
		oRm.write("</div>");
	}
	oRm.write("</div>");
};

}; // end of sap/me/TabContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.me (1.16.3)
 */
jQuery.sap.declare("sap.me.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library with controls specialized for mobile devices (extension).
 *
 * @namespace
 * @name sap.me
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.me",
  dependencies : ["sap.ui.core"],
  types: [
    "sap.me.CalendarDesign",
    "sap.me.CalendarEventType"
  ],
  interfaces: [],
  controls: [
    "sap.me.Calendar",
    "sap.me.CalendarLegend",
    "sap.me.OverlapCalendar",
    "sap.me.ProgressIndicator",
    "sap.me.TabContainer"
  ],
  elements: [
    "sap.me.OverlapCalendarEvent"
  ],
  version: "1.16.3"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.me.CalendarDesign.
jQuery.sap.declare("sap.me.CalendarDesign");


/**
 * @class Type of Design for the Calendar
 *
 * @version 1.16.3
 * @static
 * @public
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 */
sap.me.CalendarDesign = {
  
    /**
     * Colors match calendar design for Action 
     * @public
     */
    Action : "Action",

    /**
     * Colors match calendar design for Approval 
     * @public
     */
    Approval : "Approval"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.me.CalendarEventType.
jQuery.sap.declare("sap.me.CalendarEventType");


/**
 * @class Type code for a calendar event
 *
 * @version 1.16.3
 * @static
 * @public
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 */
sap.me.CalendarEventType = {
  
    /**
     * Type 00 (non-working day (e.g. weekend)) 
     * @public
     */
    Type00 : "Type00",

    /**
     * Type 01 (nonattendance / submitted day) 
     * @public
     */
    Type01 : "Type01",

    /**
     * Type 04 (open request / manager action needed) 
     * @public
     */
    Type04 : "Type04",

    /**
     * Type 06 (public holiday) 
     * @public
     */
    Type06 : "Type06",

    /**
     * Type 07 (deletion requested / your action needed) 
     * @public
     */
    Type07 : "Type07"

  };

}; // end of sap/me/library.js
if ( !jQuery.sap.isDeclared('sap.me.Calendar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.me.Calendar.
jQuery.sap.declare("sap.me.Calendar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Calendar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHideNavControls hideNavControls} : boolean (default: false)</li>
 * <li>{@link #getHideMonthTitles hideMonthTitles} : boolean (default: false)</li>
 * <li>{@link #getMonthsPerRow monthsPerRow} : int (default: 0)</li>
 * <li>{@link #getDayWidth dayWidth} : int (default: 45)</li>
 * <li>{@link #getDayHeight dayHeight} : int (default: 50)</li>
 * <li>{@link #getWeeksPerRow weeksPerRow} : int (default: 1)</li>
 * <li>{@link #getSingleRow singleRow} : boolean</li>
 * <li>{@link #getMonthsToDisplay monthsToDisplay} : int (default: 1)</li>
 * <li>{@link #getCurrentDate currentDate} : string</li>
 * <li>{@link #getEnableMultiselection enableMultiselection} : boolean (default: false)</li>
 * <li>{@link #getFirstDayOffset firstDayOffset} : int (default: 0)</li>
 * <li>{@link #getDisabledWeekDays disabledWeekDays} : any</li>
 * <li>{@link #getDisabledDates disabledDates} : any</li>
 * <li>{@link #getSwipeToNavigate swipeToNavigate} : boolean (default: false)</li>
 * <li>{@link #getDesign design} : sap.me.CalendarDesign (default: sap.me.CalendarDesign.Approval)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getDays days} : any</li>
 * <li>{@link #getMonths months} : any</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.me.Calendar#event:tapOnDate tapOnDate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.me.Calendar#event:changeCurrentDate changeCurrentDate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.me.Calendar#event:changeRange changeRange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This is the Calendar control
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.me.Calendar
 */
sap.ui.core.Control.extend("sap.me.Calendar", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getSelectedDates", "toggleDatesSelection", "toggleDatesRangeSelection", "unselectAllDates", "toggleDatesType"
	],

	// ---- control specific ----
	library : "sap.me",
	properties : {
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"hideNavControls" : {type : "boolean", group : "Misc", defaultValue : false},
		"hideMonthTitles" : {type : "boolean", group : "Misc", defaultValue : false},
		"monthsPerRow" : {type : "int", group : "Misc", defaultValue : 0},
		"dayWidth" : {type : "int", group : "Misc", defaultValue : 45},
		"dayHeight" : {type : "int", group : "Misc", defaultValue : 50},
		"weeksPerRow" : {type : "int", group : "Misc", defaultValue : 1},
		"singleRow" : {type : "boolean", group : "Misc", defaultValue : null},
		"monthsToDisplay" : {type : "int", group : "Misc", defaultValue : 1},
		"currentDate" : {type : "string", group : "Misc", defaultValue : null},
		"enableMultiselection" : {type : "boolean", group : "Misc", defaultValue : false},
		"firstDayOffset" : {type : "int", group : "Misc", defaultValue : 0},
		"disabledWeekDays" : {type : "any", group : "Misc", defaultValue : null},
		"disabledDates" : {type : "any", group : "Misc", defaultValue : null},
		"swipeToNavigate" : {type : "boolean", group : "Misc", defaultValue : false},
		"design" : {type : "sap.me.CalendarDesign", group : "Appearance", defaultValue : sap.me.CalendarDesign.Approval},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"days" : {type : "any", group : "Appearance", defaultValue : null},
		"months" : {type : "any", group : "Appearance", defaultValue : null}
	},
	events : {
		"tapOnDate" : {}, 
		"changeCurrentDate" : {}, 
		"changeRange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.me.Calendar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.me.Calendar.extend
 * @function
 */

sap.me.Calendar.M_EVENTS = {'tapOnDate':'tapOnDate','changeCurrentDate':'changeCurrentDate','changeRange':'changeRange'};


/**
 * Getter for property <code>visible</code>.
 * visibility of the control
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.me.Calendar#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setVisible
 * @function
 */


/**
 * Getter for property <code>hideNavControls</code>.
 * hides the area of navigation controls
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hideNavControls</code>
 * @public
 * @name sap.me.Calendar#getHideNavControls
 * @function
 */

/**
 * Setter for property <code>hideNavControls</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHideNavControls  new value for property <code>hideNavControls</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setHideNavControls
 * @function
 */


/**
 * Getter for property <code>hideMonthTitles</code>.
 * hides the area of month titles
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hideMonthTitles</code>
 * @public
 * @name sap.me.Calendar#getHideMonthTitles
 * @function
 */

/**
 * Setter for property <code>hideMonthTitles</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHideMonthTitles  new value for property <code>hideMonthTitles</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setHideMonthTitles
 * @function
 */


/**
 * Getter for property <code>monthsPerRow</code>.
 * months to display in a row. This sets the width of the whole control in order to contain the desired number of months per row
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>monthsPerRow</code>
 * @public
 * @name sap.me.Calendar#getMonthsPerRow
 * @function
 */

/**
 * Setter for property <code>monthsPerRow</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMonthsPerRow  new value for property <code>monthsPerRow</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setMonthsPerRow
 * @function
 */


/**
 * Getter for property <code>dayWidth</code>.
 * the width of a day
 *
 * Default value is <code>45</code>
 *
 * @return {int} the value of property <code>dayWidth</code>
 * @public
 * @name sap.me.Calendar#getDayWidth
 * @function
 */

/**
 * Setter for property <code>dayWidth</code>.
 *
 * Default value is <code>45</code> 
 *
 * @param {int} iDayWidth  new value for property <code>dayWidth</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setDayWidth
 * @function
 */


/**
 * Getter for property <code>dayHeight</code>.
 * the height of a day
 *
 * Default value is <code>50</code>
 *
 * @return {int} the value of property <code>dayHeight</code>
 * @public
 * @name sap.me.Calendar#getDayHeight
 * @function
 */

/**
 * Setter for property <code>dayHeight</code>.
 *
 * Default value is <code>50</code> 
 *
 * @param {int} iDayHeight  new value for property <code>dayHeight</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setDayHeight
 * @function
 */


/**
 * Getter for property <code>weeksPerRow</code>.
 * weeks to display in a row
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>weeksPerRow</code>
 * @public
 * @name sap.me.Calendar#getWeeksPerRow
 * @function
 */

/**
 * Setter for property <code>weeksPerRow</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iWeeksPerRow  new value for property <code>weeksPerRow</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setWeeksPerRow
 * @function
 */


/**
 * Getter for property <code>singleRow</code>.
 * boolean that sets the view to week mode or month mode
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>singleRow</code>
 * @public
 * @name sap.me.Calendar#getSingleRow
 * @function
 */

/**
 * Setter for property <code>singleRow</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bSingleRow  new value for property <code>singleRow</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setSingleRow
 * @function
 */


/**
 * Getter for property <code>monthsToDisplay</code>.
 * number of months in a row.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>monthsToDisplay</code>
 * @public
 * @name sap.me.Calendar#getMonthsToDisplay
 * @function
 */

/**
 * Setter for property <code>monthsToDisplay</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iMonthsToDisplay  new value for property <code>monthsToDisplay</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setMonthsToDisplay
 * @function
 */


/**
 * Getter for property <code>currentDate</code>.
 * the center date where the month/week will be build around
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>currentDate</code>
 * @public
 * @name sap.me.Calendar#getCurrentDate
 * @function
 */

/**
 * Setter for property <code>currentDate</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCurrentDate  new value for property <code>currentDate</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setCurrentDate
 * @function
 */


/**
 * Getter for property <code>enableMultiselection</code>.
 * to enable multiselection feature
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableMultiselection</code>
 * @public
 * @name sap.me.Calendar#getEnableMultiselection
 * @function
 */

/**
 * Setter for property <code>enableMultiselection</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableMultiselection  new value for property <code>enableMultiselection</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setEnableMultiselection
 * @function
 */


/**
 * Getter for property <code>firstDayOffset</code>.
 * to offset the first day of the week (0 = sunday)
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>firstDayOffset</code>
 * @public
 * @name sap.me.Calendar#getFirstDayOffset
 * @function
 */

/**
 * Setter for property <code>firstDayOffset</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iFirstDayOffset  new value for property <code>firstDayOffset</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setFirstDayOffset
 * @function
 */


/**
 * Getter for property <code>disabledWeekDays</code>.
 * Array of weekDays (as integers where 0=Sunday, 1=Monday etc) to be disabled. Interaction will be disabled for these week days.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>disabledWeekDays</code>
 * @public
 * @name sap.me.Calendar#getDisabledWeekDays
 * @function
 */

/**
 * Setter for property <code>disabledWeekDays</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oDisabledWeekDays  new value for property <code>disabledWeekDays</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setDisabledWeekDays
 * @function
 */


/**
 * Getter for property <code>disabledDates</code>.
 * Array of specific dates (strings or Date objects) that will be disabled/non interactive
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>disabledDates</code>
 * @public
 * @name sap.me.Calendar#getDisabledDates
 * @function
 */

/**
 * Setter for property <code>disabledDates</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oDisabledDates  new value for property <code>disabledDates</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setDisabledDates
 * @function
 */


/**
 * Getter for property <code>swipeToNavigate</code>.
 * When enabled, swipe gestures will navigate and not select
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>swipeToNavigate</code>
 * @public
 * @name sap.me.Calendar#getSwipeToNavigate
 * @function
 */

/**
 * Setter for property <code>swipeToNavigate</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSwipeToNavigate  new value for property <code>swipeToNavigate</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setSwipeToNavigate
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Indicates the design of the calendar (mainly colors)
 *
 * Default value is <code>sap.me.CalendarDesign.Approval</code>
 *
 * @return {sap.me.CalendarDesign} the value of property <code>design</code>
 * @public
 * @name sap.me.Calendar#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>sap.me.CalendarDesign.Approval</code> 
 *
 * @param {sap.me.CalendarDesign} oDesign  new value for property <code>design</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setDesign
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the calendar
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.me.Calendar#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setWidth
 * @function
 */


/**
 * Getter for property <code>days</code>.
 * Array of day names, default value is sap.m.getLocaleData().getDays("abbreviated")
 * Check sap.ui.core.LocaleData documentation for more info.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>days</code>
 * @public
 * @name sap.me.Calendar#getDays
 * @function
 */

/**
 * Setter for property <code>days</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oDays  new value for property <code>days</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setDays
 * @function
 */


/**
 * Getter for property <code>months</code>.
 * Array of month names, default value is sap.m.getLocaleData().getMonths("abbreviated")
 * Check sap.ui.core.LocaleData documentation for more info.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>months</code>
 * @public
 * @name sap.me.Calendar#getMonths
 * @function
 */

/**
 * Setter for property <code>months</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oMonths  new value for property <code>months</code>
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#setMonths
 * @function
 */


/**
 * event fired when a date is tapped 
 *
 * @name sap.me.Calendar#tapOnDate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.date date tapped
 * @param {boolean} oControlEvent.getParameters.didSelect if day was selected
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tapOnDate' event of this <code>sap.me.Calendar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.me.Calendar</code>.<br/> itself. 
 *  
 * event fired when a date is tapped 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.me.Calendar</code>.<br/> itself.
 *
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#attachTapOnDate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tapOnDate' event of this <code>sap.me.Calendar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#detachTapOnDate
 * @function
 */

/**
 * Fire event tapOnDate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'date' of type <code>string</code> date tapped</li>
 * <li>'didSelect' of type <code>boolean</code> if day was selected</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.me.Calendar#fireTapOnDate
 * @function
 */


/**
 * event fired when tap to next or previous button and currentDate is updated 
 *
 * @name sap.me.Calendar#changeCurrentDate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.currentDate new date
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'changeCurrentDate' event of this <code>sap.me.Calendar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.me.Calendar</code>.<br/> itself. 
 *  
 * event fired when tap to next or previous button and currentDate is updated 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.me.Calendar</code>.<br/> itself.
 *
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#attachChangeCurrentDate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'changeCurrentDate' event of this <code>sap.me.Calendar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#detachChangeCurrentDate
 * @function
 */

/**
 * Fire event changeCurrentDate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'currentDate' of type <code>string</code> new date</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.me.Calendar#fireChangeCurrentDate
 * @function
 */


/**
 * when the range of selected dates changes 
 *
 * @name sap.me.Calendar#changeRange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.fromDate from date
 * @param {string} oControlEvent.getParameters.toDate to date
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'changeRange' event of this <code>sap.me.Calendar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.me.Calendar</code>.<br/> itself. 
 *  
 * when the range of selected dates changes 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.me.Calendar</code>.<br/> itself.
 *
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#attachChangeRange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'changeRange' event of this <code>sap.me.Calendar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.Calendar#detachChangeRange
 * @function
 */

/**
 * Fire event changeRange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'fromDate' of type <code>string</code> from date</li>
 * <li>'toDate' of type <code>string</code> to date</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.me.Calendar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.me.Calendar#fireChangeRange
 * @function
 */


/**
 * returns an array of the currently selected dates (dates are strings formatted as Date.toDateString())
 *
 * @name sap.me.Calendar.prototype.getSelectedDates
 * @function

 * @type any
 * @public
 */


/**
 * it toggles the passed dates to selected/unselected
 *
 * @name sap.me.Calendar.prototype.toggleDatesSelection
 * @function
 * @param {any} 
 *         oADates
 *         Array of the dates to be toggled. they can be Strings or Date objects.
 * @param {boolean} 
 *         bBSelect
 *         select/unselect. Optional, if omitted it inverts each date's current state

 * @type void
 * @public
 */


/**
 * it toggles the selection of the dates within the passed range to selected/unselected
 *
 * @name sap.me.Calendar.prototype.toggleDatesRangeSelection
 * @function
 * @param {any} 
 *         oODateStart
 *         starting date of the range. It can be Strings or Date objects.
 * @param {any} 
 *         oODateEnd
 *         ending date of the range. It can be Strings or Date objects.
 * @param {boolean} 
 *         bBSelected
 *         selected/unselected. Optional, if omitted it inverts each date's current state

 * @type void
 * @public
 */


/**
 * unselect all the dates
 *
 * @name sap.me.Calendar.prototype.unselectAllDates
 * @function

 * @type void
 * @public
 */


/**
 * Change the type of the given dates
 *
 * @name sap.me.Calendar.prototype.toggleDatesType
 * @function
 * @param {any} 
 *         oADates
 *         An array of dates in string representation
 * @param {sap.me.CalendarEventType} 
 *         oSType
 *         The type of event
 * @param {boolean} 
 *         bBAdd
 *         Add/remove the type, if ommited it will toggle

 * @type void
 * @public
 */


// Start of sap/me/Calendar.js
///**
// * This file defines behavior for the control,
// */

/**
 * @private
 */
sap.me.Calendar.prototype.init = function() {
	// by default set currentdate to now
	var oDate = new Date();
	this.setProperty("currentDate", oDate.toDateString(), true);

	// this.setProperty("disabledWeekDays", [0], true);

	// this shouldn't be required here, but without it the sap.m.getLocaleData
	// doesn't work
	jQuery.sap.require("sap.ui.core.LocaleData");

	var oi18n = sap.m.getLocaleData();
	this.setDays(oi18n.getDays("abbreviated"));
	this.setMonths(oi18n.getMonths("abbreviated"));

	var oPrevBtn = new sap.ui.core.Icon({
		src:"navigation-left-arrow"
	});
	oPrevBtn.addStyleClass("sapMeCalendarPrevious");
	oPrevBtn.attachPress(null, this._gotoPrevious, this);
	oPrevBtn.setParent(this);
	this._oPrevBtn = oPrevBtn;

	var oNextBtn = new sap.ui.core.Icon({
		src:"navigation-right-arrow"
	});
	oNextBtn.addStyleClass("sapMeCalendarNext");
	oNextBtn.attachPress(null, this._gotoNext, this);
	oNextBtn.setParent(this);
	this._oNextBtn = oNextBtn;

	this._oDatesClasses = {};

	this._$interactiveDates = null;
};

sap.me.Calendar.prototype.exit = function() {
	this._oPrevBtn.destroy();
	delete this._oPrevBtn;
	this._oNextBtn.destroy();
	delete this._oNextBtn;

	delete this._oDatesClasses;
	delete this._$interactiveDates;

	delete this._$fromDate;
	delete this._$toDate;
};

sap.me.Calendar.prototype.onBeforeRendering = function() {
	delete this._$interactiveDates;
};
sap.me.Calendar.prototype.onAfterRendering = function() {
	var $this = this.$();
	var $dates = null;
	var aDisabledWeekDays = this.getDisabledWeekDays() || [];
	var aClassesToDisable = [];
	for ( var i = 0; i < aDisabledWeekDays.length; i++) {
		aClassesToDisable.push(".sapMeCalendarWeekDay" + aDisabledWeekDays[i]);
	}

	var bIncludeNotInCurrentMonth = this.getSingleRow()
			|| this.getMonthsToDisplay() === 1;
	if (!bIncludeNotInCurrentMonth) {
		aClassesToDisable.push(".sapMeCalendarDayNotInCurrentMonth");
	}
	if (aClassesToDisable.length) {
		var sToExclude = aClassesToDisable.join(", ");
		// remove pointer events for non-interactive dates
		$this.find(".sapMeCalendarMonth > div.sapMeCalendarMonthDays")
				.children(sToExclude).css({
					"pointer-events" : "none"
				});
		$dates = $this
				.find(".sapMeCalendarMonth > div.sapMeCalendarMonthDays > .sapMeCalendarMonthDay:not("
						+ sToExclude + ")");
	} else {
		$dates = $this
				.find(".sapMeCalendarMonth > div.sapMeCalendarMonthDays > .sapMeCalendarMonthDay");
	}
	var aDatesToDisable = this.getDisabledDates() || [];
	for ( var i = 0; i < aDatesToDisable.length; i++) {
		var sDate = aDatesToDisable[i];
		$dates.children("input[value='" + sDate + "']") // get the right input
		.parent() // get the date
		.css({
			"pointer-events" : "none"
		}); // disable
	}
	for ( var sDate in this._oDatesClasses) {
		var sStates = this._oDatesClasses[sDate].join(" ");
		$dates.children("input[value='" + sDate + "']") // get the right input
		.parent() // get the date
		.addClass(sStates); // set selection
	}
	// i save this array so it will be more performant instead of doing
	// selectors.
	this._$interactiveDates = $dates;

	// hiding nav controls
	var bHide = this.getHideNavControls();
	this._oPrevBtn.$().css({
		display : bHide ? "none" : ""
	});
	this._oNextBtn.$().css({
		display : bHide ? "none" : ""
	});
};

sap.me.Calendar.prototype.setEnableMultiselection = function(bEnable) {
	return this.setProperty("enableMultiselection", bEnable, true); // no
																	// rerender
																	// needed
};

sap.me.Calendar.prototype.setHideNavControls = function(bHide) {
	if (this.getDomRef()) {
		this._oPrevBtn.$().css({
			display : bHide ? "none" : ""
		});
		this._oNextBtn.$().css({
			display : bHide ? "none" : ""
		});
	}
	return this.setProperty("hideNavControls", bHide, true); // no rerender
																// needed
};

sap.me.Calendar.prototype.setHideMonthTitles = function(bHide) {
	if (this.getDomRef()) {
		this.$().find(".sapMeCalendarMonthName").css({
			display : bHide ? "none" : ""
		});
	}
	return this.setProperty("hideMonthTitles", bHide, true); // no rerender
																// needed
};

sap.me.Calendar.prototype.setFirstDayOffset = function(iOffset) {
	iOffset = iOffset % this.getDays().length;
	return this.setProperty("firstDayOffset", iOffset);
};

sap.me.Calendar.prototype.setWeeksPerRow = function(iWeeks) {
	iWeeks = iWeeks % 5;
	return this.setProperty("weeksPerRow", iWeeks);
};

sap.me.Calendar.prototype.setDisabledWeekDays = function(aWeekDays) {
	aWeekDays = aWeekDays || [];
	return this.setProperty("disabledWeekDays", aWeekDays);
};

sap.me.Calendar.prototype.setDisabledDates = function(aDates) {
	aDates = aDates || [];
	for ( var i = 0; i < aDates.length; i++) {
		var oDate = aDates[i];
		if (typeof oDate == "string") {
			oDate = new Date(oDate);
		}
		var sDate = oDate.toDateString();
		aDates[i] = sDate;
	}
	return this.setProperty("disabledDates", aDates);
};

// ** GESTURE HANDLERS ** //

sap.me.Calendar.prototype.ontouchstart = function(oEvent) {
	if (!this.getSwipeToNavigate()) {
		this._gestureStart(oEvent);
	}
};
sap.me.Calendar.prototype._gestureStart = function(oEvent) {
	this._$fromDate = this.getEnableMultiselection() ? this
			._getDateDomRef(oEvent.target) : null;
};

sap.me.Calendar.prototype.ontouchmove = function(oEvent) {
	if (!this.getSwipeToNavigate()) {
		this._gestureMove(oEvent);
	}
};
sap.me.Calendar.prototype._gestureMove = function(oEvent) {
	if (this._$fromDate) {
		if (!this._$toDate) { // it means it is the first time it moves
			this._$fromDate.addClass("sapMeCalendarHighlight");
			this._$toDate = this._$fromDate;
		}
		oEvent.stopPropagation();
		oEvent.preventDefault();
		var oDomRef = oEvent.target;
		if (oEvent.touches.length) {
			var oTouch = oEvent.touches[0];
			oDomRef = document.elementFromPoint(oTouch.clientX, oTouch.clientY);
		}
		var $toDate = this._getDateDomRef(oDomRef);
		if ($toDate && $toDate != this._$toDate) {
			this._$toDate.removeClass("sapMeCalendarHighlight");
			this._$fromDate.addClass("sapMeCalendarHighlight"); // because it
																// could have
																// been = toDate
			$toDate.addClass("sapMeCalendarHighlight");
			this._$toDate = $toDate;
		}
	}
};

sap.me.Calendar.prototype.ontouchend = function(oEvent) {
	if (!this.getSwipeToNavigate()) {
		this._gestureEnd(oEvent);
	}
};
sap.me.Calendar.prototype._gestureEnd = function(oEvent) {
	if (this._$fromDate && this._$toDate) { // this means it has moved
		oEvent.stopPropagation();
		oEvent.preventDefault();
		var sFromDate = this._getDateValue(this._$fromDate);
		var sToDate = this._getDateValue(this._$toDate);
		this._$fromDate.removeClass("sapMeCalendarHighlight");
		this._$toDate.removeClass("sapMeCalendarHighlight");
		this.toggleDatesRangeSelection(sFromDate,sToDate,true);
		this.fireChangeRange({
			fromDate : sFromDate,
			toDate : sToDate
		});
	}
	delete this._$fromDate;
	delete this._$toDate;
};

sap.me.Calendar.prototype.ontap = function(oEvent) {
	this._gestureSelect(oEvent);
};
sap.me.Calendar.prototype._gestureSelect = function(oEvent) {
	var $date = this._getDateDomRef(oEvent.target);
	if ($date) { // handle tap-like event
		var sDate = this._getDateValue($date);
		var bDidSelect = !$date.hasClass("sapMeCalendarSelected");

		if (!this.getEnableMultiselection()) {
			this.unselectAllDates();
		}
		$date.toggleClass("sapMeCalendarSelected", bDidSelect);
		this._updateDatesWithClass("sapMeCalendarSelected", sDate, bDidSelect);
		this.fireTapOnDate({
			didSelect : bDidSelect,
			date : sDate
		});
	}
};

sap.me.Calendar.prototype.onswipeleft = function(oEvent) {
	if (this.getSwipeToNavigate()) {
		this._gotoNext();
	}
};
sap.me.Calendar.prototype.onswiperight = function(oEvent) {
	if (this.getSwipeToNavigate()) {
		this._gotoPrevious();
	}
};

// ** PUBLIC METHODS **//

sap.me.Calendar.prototype.getSelectedDates = function() {
	return this._getDatesWithStyleClass("sapMeCalendarSelected");
};



sap.me.Calendar.prototype.toggleDatesSelection = function(aDates, bSelected) {
	this._toggleDatesStyleClass("sapMeCalendarSelected", aDates, bSelected);
};

sap.me.Calendar.prototype.toggleDatesType = function(aDates, sType, bSelected) {
	this._toggleDatesStyleClass("sapMeCalendar"+sType, aDates, bSelected);
};
sap.me.Calendar.prototype.removeTypesOfAllDates = function(){
	this._removeStyleClassOfAllDates("sapMeCalendar"+sap.me.CalendarEventType.Type00);
	this._removeStyleClassOfAllDates("sapMeCalendar"+sap.me.CalendarEventType.Type01);
	this._removeStyleClassOfAllDates("sapMeCalendar"+sap.me.CalendarEventType.Type04);
	this._removeStyleClassOfAllDates("sapMeCalendar"+sap.me.CalendarEventType.Type06);
	this._removeStyleClassOfAllDates("sapMeCalendar"+sap.me.CalendarEventType.Type07);
};


sap.me.Calendar.prototype.unselectAllDates = function() {
	this._removeStyleClassOfAllDates("sapMeCalendarSelected");
};


sap.me.Calendar.prototype.toggleDatesRangeSelection = function(oDateStart,
		oDateEnd, bSelected) {
	this._toggleDatesRangeStyleClass("sapMeCalendarSelected", oDateStart,
			oDateEnd, bSelected);
};

// ** PRIVATE, INTERNAL METHODS **//
sap.me.Calendar.prototype._getDatesWithStyleClass = function(sState) {
	var aDates = [];
	for ( var sDate in this._oDatesClasses) {
		if (jQuery.inArray(sState, this._oDatesClasses[sDate]) !== -1) {
			aDates.push(sDate);
		}
	}
	return aDates;
};

sap.me.Calendar.prototype._toggleDatesRangeStyleClass = function(sClass,
		oDateStart, oDateEnd, bActive) {
	if (typeof oDateStart == "string") {
		oDateStart = new Date(oDateStart);
	}
	if (typeof oDateEnd == "string") {
		oDateEnd = new Date(oDateEnd);
	}

	if (oDateStart && oDateEnd && typeof oDateStart.getTime == "function"
			&& typeof oDateEnd.getTime == "function") {
		if (oDateStart > oDateEnd) {
			var oTemp = new Date(oDateStart.getTime());
			oDateStart = oDateEnd;
			oDateEnd = oTemp;
		}
		var aDates = [];
		var oDateStartCopy = new Date(oDateStart.getTime());
		while (oDateEnd - oDateStartCopy >= 0) {
			aDates.push(oDateStartCopy.toDateString());
			oDateStartCopy.setDate(oDateStartCopy.getDate() + 1);
		}
		this._toggleDatesStyleClass(sClass, aDates, bActive);
	}
};
sap.me.Calendar.prototype._toggleDatesStyleClass = function(sClass, aDates,
		bActive) {
	for ( var i = 0; i < aDates.length; i++) {
		var oDate = aDates[i];
		if (typeof oDate == "string") {
			oDate = new Date(oDate);
		}
		var sDate = oDate.toDateString();
		aDates[i] = sDate;
		this._updateDatesWithClass(sClass, sDate, bActive);
		if (this._$interactiveDates) {
			this._$interactiveDates.children("input[value='" + sDate + "']")
					.parent().toggleClass(sClass, bActive);
		}
	}
};


sap.me.Calendar.prototype._removeStyleClassOfAllDates = function(sClass) {
	for ( var sDate in this._oDatesClasses) {
		this._updateDatesWithClass(sClass, sDate, false);
	}
	if (this._$interactiveDates) {
		this._$interactiveDates.removeClass(sClass);
	}
};
sap.me.Calendar.prototype._gotoPrevious = function() {
	var sCurrentDate = this.getCurrentDate();
	var currentDate = new Date(sCurrentDate);
	var bSingleRow = this.getSingleRow();
	if (bSingleRow) {
		currentDate.setDate(currentDate.getDate() - 7);
	} else {
		currentDate.setDate(0); // pass to previous month
		currentDate.setDate(1); // go to its first day
	}
	var sCurDate = currentDate.toDateString();
	this.setCurrentDate(sCurDate);
	this.fireChangeCurrentDate({
		currentDate : sCurDate
	});
};

sap.me.Calendar.prototype._gotoNext = function() {
	var sCurrentDate = this.getCurrentDate();
	var currentDate = new Date(sCurrentDate);
	var bSingleRow = this.getSingleRow();
	if (bSingleRow) {
		currentDate.setDate(currentDate.getDate() + 7);
	} else {
		currentDate.setDate(32); // to pass to next month
		currentDate.setDate(1); // to go to its first day
	}
	var sCurDate = currentDate.toDateString();
	this.setCurrentDate(sCurDate);
	this.fireChangeCurrentDate({
		currentDate : sCurDate
	});
};

sap.me.Calendar.prototype._updateDatesWithClass = function(sClass, sDate,
		bActive) {
	var aStates = this._oDatesClasses[sDate] || [];
	var i = jQuery.inArray(sClass, aStates);
	if (bActive && i === -1) {
		aStates.push(sClass);
	} else if (!bActive && i !== -1) {
		aStates.splice(i, 1);
	}

	if (aStates.length === 0) {
		this._oDatesClasses[sDate] = null;
		delete this._oDatesClasses[sDate];
	} else {
		this._oDatesClasses[sDate] = aStates;
	}
};

sap.me.Calendar.prototype._getDateValue = function($date) {
	// TODO find proper way (e.g. do CalendarDay control)
	return $date.children("input").eq(0).val();
};

sap.me.Calendar.prototype._getMonthDate = function(oDomRef) {
	var $domref = jQuery(oDomRef);
	var $this = jQuery(this.getDomRef());
	while ($domref && $domref != $this
			&& !$domref.hasClass("sapMeCalendarMonthDay")) {
		$domref = $domref.parent();
	}
	return $domref && $domref.parent().hasClass("sapMeCalendarMonth") ? $domref
			: null;
};

sap.me.Calendar.prototype._getDateDomRef = function(oDomRef) {
	var $src = oDomRef ? jQuery(oDomRef) : null;
	var sThisId = this.getId();
	var $result = null;
	while ($src && $src[0].id != sThisId
			&& !$src.hasClass("sapMeCalendarMonth")) {
		if ($src.hasClass("sapMeCalendarMonthDay")
				&& $src.parent().hasClass("sapMeCalendarMonthDays")) {
			$result = $src;
			break;
		}
		$src = $src.parent();
	}
	return $result;
};

}; // end of sap/me/Calendar.js
if ( !jQuery.sap.isDeclared('sap.me.CalendarLegend') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.me.CalendarLegend.
jQuery.sap.declare("sap.me.CalendarLegend");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new CalendarLegend.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLegendForType00 legendForType00} : string</li>
 * <li>{@link #getLegendForType01 legendForType01} : string</li>
 * <li>{@link #getLegendForType04 legendForType04} : string</li>
 * <li>{@link #getLegendForType06 legendForType06} : string</li>
 * <li>{@link #getLegendForType07 legendForType07} : string</li>
 * <li>{@link #getLegendForToday legendForToday} : string</li>
 * <li>{@link #getLegendForSelected legendForSelected} : string</li>
 * <li>{@link #getLegendForSelected00 legendForSelected00} : string</li>
 * <li>{@link #getLegendForNormal legendForNormal} : string</li>
 * <li>{@link #getExpandable expandable} : boolean (default: true)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getLegendWidth legendWidth} : sap.ui.core.CSSSize (default: '12.5rem')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDesign design} : sap.me.CalendarDesign (default: sap.me.CalendarDesign.Approval)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Legend for the calendar control
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.me.CalendarLegend
 */
sap.ui.core.Control.extend("sap.me.CalendarLegend", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.me",
	properties : {
		"legendForType00" : {type : "string", group : "Misc", defaultValue : null},
		"legendForType01" : {type : "string", group : "Misc", defaultValue : null},
		"legendForType04" : {type : "string", group : "Misc", defaultValue : null},
		"legendForType06" : {type : "string", group : "Misc", defaultValue : null},
		"legendForType07" : {type : "string", group : "Misc", defaultValue : null},
		"legendForToday" : {type : "string", group : "Misc", defaultValue : null},
		"legendForSelected" : {type : "string", group : "Misc", defaultValue : null},
		"legendForSelected00" : {type : "string", group : "Misc", defaultValue : null},
		"legendForNormal" : {type : "string", group : "Misc", defaultValue : null},
		"expandable" : {type : "boolean", group : "Misc", defaultValue : true},
		"expanded" : {type : "boolean", group : "Misc", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"legendWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '12.5rem'},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"design" : {type : "sap.me.CalendarDesign", group : "Appearance", defaultValue : sap.me.CalendarDesign.Approval}
	},
	aggregations : {
    	"labels" : {type : "sap.m.Label", multiple : true, singularName : "label", visibility : "hidden"}, 
    	"colors" : {type : "sap.ui.core.Control", multiple : true, singularName : "color", visibility : "hidden"}, 
    	"icon" : {type : "sap.ui.core.Icon", multiple : false, visibility : "hidden"}
	}
}});


/**
 * Creates a new subclass of class sap.me.CalendarLegend with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.me.CalendarLegend.extend
 * @function
 */


/**
 * Getter for property <code>legendForType00</code>.
 * legend for type 00
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>legendForType00</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendForType00
 * @function
 */

/**
 * Setter for property <code>legendForType00</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLegendForType00  new value for property <code>legendForType00</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendForType00
 * @function
 */


/**
 * Getter for property <code>legendForType01</code>.
 * legend for type 01
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>legendForType01</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendForType01
 * @function
 */

/**
 * Setter for property <code>legendForType01</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLegendForType01  new value for property <code>legendForType01</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendForType01
 * @function
 */


/**
 * Getter for property <code>legendForType04</code>.
 * legend for type 04
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>legendForType04</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendForType04
 * @function
 */

/**
 * Setter for property <code>legendForType04</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLegendForType04  new value for property <code>legendForType04</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendForType04
 * @function
 */


/**
 * Getter for property <code>legendForType06</code>.
 * legend for type 06
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>legendForType06</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendForType06
 * @function
 */

/**
 * Setter for property <code>legendForType06</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLegendForType06  new value for property <code>legendForType06</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendForType06
 * @function
 */


/**
 * Getter for property <code>legendForType07</code>.
 * legend for type 07
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>legendForType07</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendForType07
 * @function
 */

/**
 * Setter for property <code>legendForType07</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLegendForType07  new value for property <code>legendForType07</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendForType07
 * @function
 */


/**
 * Getter for property <code>legendForToday</code>.
 * legend for today
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>legendForToday</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendForToday
 * @function
 */

/**
 * Setter for property <code>legendForToday</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLegendForToday  new value for property <code>legendForToday</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendForToday
 * @function
 */


/**
 * Getter for property <code>legendForSelected</code>.
 * legend for selected
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>legendForSelected</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendForSelected
 * @function
 */

/**
 * Setter for property <code>legendForSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLegendForSelected  new value for property <code>legendForSelected</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendForSelected
 * @function
 */


/**
 * Getter for property <code>legendForSelected00</code>.
 * legend for selected 00
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>legendForSelected00</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendForSelected00
 * @function
 */

/**
 * Setter for property <code>legendForSelected00</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLegendForSelected00  new value for property <code>legendForSelected00</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendForSelected00
 * @function
 */


/**
 * Getter for property <code>legendForNormal</code>.
 * legend for normal
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>legendForNormal</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendForNormal
 * @function
 */

/**
 * Setter for property <code>legendForNormal</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLegendForNormal  new value for property <code>legendForNormal</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendForNormal
 * @function
 */


/**
 * Getter for property <code>expandable</code>.
 * Indicates if the legend can be collapsed and expanded
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>expandable</code>
 * @public
 * @name sap.me.CalendarLegend#getExpandable
 * @function
 */

/**
 * Setter for property <code>expandable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bExpandable  new value for property <code>expandable</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setExpandable
 * @function
 */


/**
 * Getter for property <code>expanded</code>.
 * Indicates if the legend is expanded or not
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * @name sap.me.CalendarLegend#getExpanded
 * @function
 */

/**
 * Setter for property <code>expanded</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bExpanded  new value for property <code>expanded</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setExpanded
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Indicates the whole component width
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.me.CalendarLegend#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setWidth
 * @function
 */


/**
 * Getter for property <code>legendWidth</code>.
 * Indicates the legend items width
 *
 * Default value is <code>12.5rem</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>legendWidth</code>
 * @public
 * @name sap.me.CalendarLegend#getLegendWidth
 * @function
 */

/**
 * Setter for property <code>legendWidth</code>.
 *
 * Default value is <code>12.5rem</code> 
 *
 * @param {sap.ui.core.CSSSize} sLegendWidth  new value for property <code>legendWidth</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setLegendWidth
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Indicates if the legend is visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.me.CalendarLegend#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setVisible
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * design name for the legend
 *
 * Default value is <code>sap.me.CalendarDesign.Approval</code>
 *
 * @return {sap.me.CalendarDesign} the value of property <code>design</code>
 * @public
 * @name sap.me.CalendarLegend#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>sap.me.CalendarDesign.Approval</code> 
 *
 * @param {sap.me.CalendarDesign} oDesign  new value for property <code>design</code>
 * @return {sap.me.CalendarLegend} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.CalendarLegend#setDesign
 * @function
 */


// Start of sap/me/CalendarLegend.js
///**
// * This file defines behavior for the control,
// */

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

sap.me.CalendarLegend.prototype.init = function() {
	this._createIcon();
	sap.ui.core.IconPool.insertFontFaceStyle();
	this._legendIndex = [];
};


sap.me.CalendarLegend.prototype.setLegendForType00 = function( iValue ){
	this._setLegendLabelByName("ForType00",iValue);
};
sap.me.CalendarLegend.prototype.setLegendForType01 = function( iValue ){
	this._setLegendLabelByName("ForType01",iValue);
};
sap.me.CalendarLegend.prototype.setLegendForType04 = function( iValue ){
	this._setLegendLabelByName("ForType04",iValue);
};
sap.me.CalendarLegend.prototype.setLegendForType06 = function( iValue ){
	this._setLegendLabelByName("ForType06",iValue);
};
sap.me.CalendarLegend.prototype.setLegendForType07 = function( iValue ){
	this._setLegendLabelByName("ForType07",iValue);
};
sap.me.CalendarLegend.prototype.setLegendForToday= function( iValue ){
	this._setLegendLabelByName("ForToday",iValue);
};
sap.me.CalendarLegend.prototype.setLegendForSelected = function( iValue ){
	this._setLegendLabelByName("ForSelected",iValue);
};
sap.me.CalendarLegend.prototype.setLegendForSelected00 = function( iValue ){
	this._setLegendLabelByName("ForSelected00",iValue);
};
sap.me.CalendarLegend.prototype.setLegendForNormal = function( iValue ){
	this._setLegendLabelByName("ForNormal",iValue);
};
sap.me.CalendarLegend.prototype.setExpanded = function( iValue ){
	this.setProperty("expanded", iValue);
	this._changeIconSrc();
};

sap.me.CalendarLegend.prototype._setLegendLabelByName = function(iName,iValue){
	var olabel = sap.ui.getCore().byId(this.getId()+"-"+iName);
 	var oColor = sap.ui.getCore().byId(this.getId()+'-Color'+iName);	
		if(!olabel){ // create label and add to aggregation
			olabel = new sap.m.Label(this.getId() + '-'+iName,{
				width:"auto"
		});
		olabel.addStyleClass("sapUIMeCalendarLegendLabels");
		this.addAggregation("labels",olabel,true);
		olabel.setText(iValue);
		// create box label
		 oColor = new sap.m.Label(this.getId() + '-Color'+iName);
		oColor.addStyleClass("sapUIMeLegendColor");
		oColor.addStyleClass("sapUIMeLegendColor"+iName);
		this.addAggregation("colors",oColor,true);
		this._legendIndex.push(iName);
		}
		else{
		
		olabel.setText(iValue);
		if(!iValue){
			this.removeAggregation("colors",oColor,true);
			this.removeAggregation("labels",olabel,true);

		}
		else{
			var index = this._legendIndex.indexOf(iName);
			this.insertAggregation("colors",oColor,index,true);
			this.insertAggregation("labels",olabel,index,true);
		}

	}
	this.setProperty("legend"+iName,iValue);

};
sap.me.CalendarLegend.prototype.setExpandable= function( iValue ){
	this.setProperty("expandable",iValue);
	if(!iValue && !this.getExpanded()){
		this.toggleExpandCollapse();
	}
};
sap.me.CalendarLegend.prototype.setVisible= function( iValue ){
	this.setProperty("visible",iValue);
};

sap.me.CalendarLegend.prototype.toggleExpandCollapse = function() {
	if(!this.getExpandable())
		return;
	var bExpand = !this.getExpanded();
	//this.setExpanded(bExpand);
	var $container = jQuery.sap.byId(this.getId() + "-LegendMenu");	
	if (bExpand) {
		jQuery.sap.byId(this.getId() + "-LegendMenu").css("display","none").css("height","auto");
		$container.slideDown('600', "swing",jQuery.proxy(this.onTransitionEnded, this));
	} else {
		$container.slideUp('600', jQuery.proxy(this.onTransitionEnded, this));
	}
	this.setProperty("expanded", bExpand,true);
	this._changeIconSrc();

};
sap.me.CalendarLegend.prototype._createIcon = function() {
	var sName = this.getExpanded() ? "Collapse" : "Expand";
	var sIconName = sap.ui.core.theming.Parameters.get("sapMeCalendarLegendIcon"+sName);
	var sColor = sap.ui.core.theming.Parameters.get("sapUiLightIcon");
	var sActiveBgColor = sap.ui.core.theming.Parameters.get("sapUiHighlight");
	var sActiveColor = sap.ui.core.theming.Parameters.get("sapUiIconInverted");
	var oIcon = new sap.ui.core.Icon(this.getId() + sIconName,{
	       src: sIconName,
	       color: sColor,
	       activeBackgroundColor: sActiveBgColor,
	       activeColor: sActiveColor,
	       press: jQuery.proxy(this.toggleExpandCollapse,this)
	       
	});
	oIcon.addStyleClass("sapUIMeLegendIcon");
	this.setAggregation("icon",oIcon,true);
};
sap.me.CalendarLegend.prototype._getColorBoxStyle = function(oID) {
	var id = this.getId() + "-";
	var styleName = oID.substr(oID.indexOf(id) + id.length);
	styleName = "sapUIMeLegendColor"+styleName;
	return styleName;
};

sap.me.CalendarLegend.prototype._changeIconSrc =function () {
   var sName = null;
   if(this.getExpanded() || !this.getExpandable()){
	   sName = "Collapse"; 
   }
   else{
	   sName = "Expand"; 
   }
   var sIconName = sap.ui.core.theming.Parameters.get("sapMeCalendarLegendIcon"+sName);
   this.getAggregation("icon").setSrc(sIconName); 
};



}; // end of sap/me/CalendarLegend.js
if ( !jQuery.sap.isDeclared('sap.me.OverlapCalendar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.me.OverlapCalendar.
jQuery.sap.declare("sap.me.OverlapCalendar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new OverlapCalendar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getStartDate startDate} : string</li>
 * <li>{@link #getWeeksPerRow weeksPerRow} : int (default: 2)</li>
 * <li>{@link #getFirstDayOffset firstDayOffset} : int (default: 0)</li>
 * <li>{@link #getShowOverlapIndicator showOverlapIndicator} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getSwipeToNavigate swipeToNavigate} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCalendarEvents calendarEvents} : sap.me.OverlapCalendarEvent[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.me.OverlapCalendar#event:endOfData endOfData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.me.OverlapCalendar#event:changeDate changeDate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A calendar that allows to display events in a grid and show the overlapped events
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.me.OverlapCalendar
 */
sap.ui.core.Control.extend("sap.me.OverlapCalendar", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.me",
	properties : {
		"startDate" : {type : "string", group : "Data", defaultValue : null},
		"weeksPerRow" : {type : "int", group : "Appearance", defaultValue : 2},
		"firstDayOffset" : {type : "int", group : "Appearance", defaultValue : 0},
		"showOverlapIndicator" : {type : "boolean", group : "Appearance", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"swipeToNavigate" : {type : "boolean", group : "Behavior", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
	},
	aggregations : {
    	"calendarEvents" : {type : "sap.me.OverlapCalendarEvent", multiple : true, singularName : "calendarEvent"}, 
    	"calendar" : {type : "sap.me.Calendar", multiple : false, visibility : "hidden"}, 
    	"typeLabels" : {type : "sap.m.Label", multiple : true, singularName : "typeLabel", visibility : "hidden"}, 
    	"nameLabels" : {type : "sap.m.Label", multiple : true, singularName : "nameLabel", visibility : "hidden"}
	},
	events : {
		"endOfData" : {}, 
		"changeDate" : {}
	}
}});


/**
 * Creates a new subclass of class sap.me.OverlapCalendar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.me.OverlapCalendar.extend
 * @function
 */

sap.me.OverlapCalendar.M_EVENTS = {'endOfData':'endOfData','changeDate':'changeDate'};


/**
 * Getter for property <code>startDate</code>.
 * The first date to display for the calendar
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>startDate</code>
 * @public
 * @name sap.me.OverlapCalendar#getStartDate
 * @function
 */

/**
 * Setter for property <code>startDate</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStartDate  new value for property <code>startDate</code>
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#setStartDate
 * @function
 */


/**
 * Getter for property <code>weeksPerRow</code>.
 * Number of weeks
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>weeksPerRow</code>
 * @public
 * @name sap.me.OverlapCalendar#getWeeksPerRow
 * @function
 */

/**
 * Setter for property <code>weeksPerRow</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iWeeksPerRow  new value for property <code>weeksPerRow</code>
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#setWeeksPerRow
 * @function
 */


/**
 * Getter for property <code>firstDayOffset</code>.
 * Indicate how to offset the first day in regards to a Sunday (by default)
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>firstDayOffset</code>
 * @public
 * @name sap.me.OverlapCalendar#getFirstDayOffset
 * @function
 */

/**
 * Setter for property <code>firstDayOffset</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iFirstDayOffset  new value for property <code>firstDayOffset</code>
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#setFirstDayOffset
 * @function
 */


/**
 * Getter for property <code>showOverlapIndicator</code>.
 * Do we want to display the overlap indicator
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showOverlapIndicator</code>
 * @public
 * @name sap.me.OverlapCalendar#getShowOverlapIndicator
 * @function
 */

/**
 * Setter for property <code>showOverlapIndicator</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowOverlapIndicator  new value for property <code>showOverlapIndicator</code>
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#setShowOverlapIndicator
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Indicates if we should render this component
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.me.OverlapCalendar#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#setVisible
 * @function
 */


/**
 * Getter for property <code>swipeToNavigate</code>.
 * Use swipe gesture to navigate
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>swipeToNavigate</code>
 * @public
 * @name sap.me.OverlapCalendar#getSwipeToNavigate
 * @function
 */

/**
 * Setter for property <code>swipeToNavigate</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSwipeToNavigate  new value for property <code>swipeToNavigate</code>
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#setSwipeToNavigate
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the calendar
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.me.OverlapCalendar#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#setWidth
 * @function
 */


/**
 * Getter for aggregation <code>calendarEvents</code>.<br/>
 * The list of events to display in the calendar grid
 * 
 * @return {sap.me.OverlapCalendarEvent[]}
 * @public
 * @name sap.me.OverlapCalendar#getCalendarEvents
 * @function
 */


/**
 * Inserts a calendarEvent into the aggregation named <code>calendarEvents</code>.
 *
 * @param {sap.me.OverlapCalendarEvent}
 *          oCalendarEvent the calendarEvent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the calendarEvent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the calendarEvent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the calendarEvent is inserted at 
 *             the last position        
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#insertCalendarEvent
 * @function
 */

/**
 * Adds some calendarEvent <code>oCalendarEvent</code> 
 * to the aggregation named <code>calendarEvents</code>.
 *
 * @param {sap.me.OverlapCalendarEvent}
 *            oCalendarEvent the calendarEvent to add; if empty, nothing is inserted
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#addCalendarEvent
 * @function
 */

/**
 * Removes an calendarEvent from the aggregation named <code>calendarEvents</code>.
 *
 * @param {int | string | sap.me.OverlapCalendarEvent} vCalendarEvent the calendarEvent to remove or its index or id
 * @return {sap.me.OverlapCalendarEvent} the removed calendarEvent or null
 * @public
 * @name sap.me.OverlapCalendar#removeCalendarEvent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>calendarEvents</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.me.OverlapCalendarEvent[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.me.OverlapCalendar#removeAllCalendarEvents
 * @function
 */

/**
 * Checks for the provided <code>sap.me.OverlapCalendarEvent</code> in the aggregation named <code>calendarEvents</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.me.OverlapCalendarEvent}
 *            oCalendarEvent the calendarEvent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.me.OverlapCalendar#indexOfCalendarEvent
 * @function
 */
	

/**
 * Destroys all the calendarEvents in the aggregation 
 * named <code>calendarEvents</code>.
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#destroyCalendarEvents
 * @function
 */


/**
 * Indicates that we have reach the last week with data 
 *
 * @name sap.me.OverlapCalendar#endOfData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.before Indicates if the data missing are before the start date or at the end
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'endOfData' event of this <code>sap.me.OverlapCalendar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.me.OverlapCalendar</code>.<br/> itself. 
 *  
 * Indicates that we have reach the last week with data 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.me.OverlapCalendar</code>.<br/> itself.
 *
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#attachEndOfData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'endOfData' event of this <code>sap.me.OverlapCalendar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#detachEndOfData
 * @function
 */

/**
 * Fire event endOfData to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'before' of type <code>boolean</code> Indicates if the data missing are before the start date or at the end</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.me.OverlapCalendar#fireEndOfData
 * @function
 */


/**
 * Triggered when the displayed dates change 
 *
 * @name sap.me.OverlapCalendar#changeDate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.firstDate The first date displayed in the calendar
 * @param {object} oControlEvent.getParameters.lastDate The laste date that will be displayed
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'changeDate' event of this <code>sap.me.OverlapCalendar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.me.OverlapCalendar</code>.<br/> itself. 
 *  
 * Triggered when the displayed dates change 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.me.OverlapCalendar</code>.<br/> itself.
 *
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#attachChangeDate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'changeDate' event of this <code>sap.me.OverlapCalendar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendar#detachChangeDate
 * @function
 */

/**
 * Fire event changeDate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'firstDate' of type <code>object</code> The first date displayed in the calendar</li>
 * <li>'lastDate' of type <code>object</code> The laste date that will be displayed</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.me.OverlapCalendar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.me.OverlapCalendar#fireChangeDate
 * @function
 */


// Start of sap/me/OverlapCalendar.js
///**
// * This file defines behavior for the control,
// */

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.me.OverlapCalendar.prototype.init = function(){
	// Private property for the sap.me.Calendar control instance
	this.setAggregation("calendar", new sap.me.Calendar({
		singleRow : true,
		weeksPerRow: this.getWeeksPerRow(),
		monthsPerRow: 1,
		monthsToDisplay: 1,
		dayWidth:48,
		dayHeight:48,
		swipeToNavigate:this.getSwipeToNavigate()
	}));
	this.getCalendar().attachChangeCurrentDate(this.onCurrentDateChanged,this);
	this._typeWithBgImages = ["04","07"];
	this._oDaysOverlap = {};
};

sap.me.OverlapCalendar.prototype.onswiperight = function(oEvent){
	if(this.getSwipeToNavigate()){
		this.getCalendar().onswiperight(oEvent);
	}
};

sap.me.OverlapCalendar.prototype.onswipeleft = function(oEvent){
	if(this.getSwipeToNavigate()){
		this.getCalendar().onswipeleft(oEvent);
	}
};

sap.me.OverlapCalendar.prototype.setSwipeToNavigate = function(bSwipe){
	this.getCalendar().setSwipeToNavigate(bSwipe);
	this.setProperty("swipeToNavigate",bSwipe,true);
};

sap.me.OverlapCalendar.prototype._getFirstDateDisplayed = function(){
    var iFirstDayOffset = this.getCalendar().getFirstDayOffset(); 
    var currentDate = new Date(this.getStartDate());
    var iCurrentDate = currentDate.getDate();
    var iCurrentDay = currentDate.getDay();
    currentDate.setDate(1); // go to first day of month
	var iDaysToGoBack = iCurrentDay + 1 - iFirstDayOffset;	
    currentDate.setDate(iCurrentDate - iDaysToGoBack + 1);
    return currentDate;
};

sap.me.OverlapCalendar.prototype._getLastDateDisplayed = function(){
	var aWeekDays = this.getCalendar().getDays();
    var iWeekDays = aWeekDays.length;
    var iWeeksPerRow = this.getCalendar().getWeeksPerRow();
	var iDaysInRow = iWeeksPerRow * iWeekDays;
	var currentDate = this._getFirstDateDisplayed();
	var tempDate = new Date(currentDate.getTime());
	tempDate.setDate(tempDate.getDate() + iDaysInRow - 1);
	return tempDate;
};
sap.me.OverlapCalendar.prototype.setWeeksPerRow = function( iWeeksPerRow ){
	this.getCalendar().setWeeksPerRow(iWeeksPerRow);
	this.setProperty("weeksPerRow",iWeeksPerRow);
};

sap.me.OverlapCalendar.prototype.getCalendar = function(){
	return this.getAggregation("calendar");
};

sap.me.OverlapCalendar.prototype.setStartDate = function(sDate){
	this.getCalendar().setFirstDayOffset(0);
	this.getCalendar().setCurrentDate(sDate);
	this.setProperty("startDate",sDate);
	var offset = this._getDaysOffset(new Date(sDate), this._getFirstDateDisplayed());
	this.getCalendar().setFirstDayOffset(offset);
};
	
sap.me.OverlapCalendar.prototype.onCurrentDateChanged = function(oEvent){
	this.setProperty("startDate",oEvent.getParameter("currentDate"),true);
	this.getCalendar().invalidate();
	this._renderCalendarEvents();
	this.fireChangeDate({firstDate:this._getFirstDateDisplayed(),endDate:this._getLastDateDisplayed()});
};
sap.me.OverlapCalendar.prototype.onBeforeRendering = function(){
	this._aRows = [];
	this._lastDate = null;
	this._firstDate = null;
	var aCalendarEvents = this.getCalendarEvents();
	jQuery.each(aCalendarEvents, jQuery.proxy(this._parseCalendarEvent,this));
};
sap.me.OverlapCalendar.prototype.onAfterRendering = function(){
	this._renderCalendarEvents();
};

sap.me.OverlapCalendar.prototype._getDayId = function( date ){
	var currentDate = new Date(this._getFirstDateDisplayed());
	return this._getDaysOffset(currentDate, date);
};

sap.me.OverlapCalendar.prototype._cleanUpDivs = function(){
	// Clean up the divs
	jQuery(".sapMeOverlapCalendarDay").removeClass().addClass("sapMeOverlapCalendarDay");
	jQuery(".sapMeOverlapCalendarHalfDay").remove();
	jQuery(".sapMeOverlapCalendarDay.sapMeOverlapCalendarDayWithHalf").removeClass(".sapMeOverlapCalendarDayWithHalf");
	jQuery(".sapMeOverlapCalendarOverlap").css("background-color","transparent").css("border","none");
	jQuery(".sapMeOverlapCalendarTypeLbl").remove();
};

sap.me.OverlapCalendar.prototype._renderCalendarEvents = function(){
	this._mHalfDays = {};
	this._cleanUpDivs();
	// Render the events
	this._oDaysOverlap = {};
	var aCalendarEvents = this.getCalendarEvents();
	jQuery.each(aCalendarEvents, jQuery.proxy(this._renderCalendarEvent,this));
	jQuery.each(this._mHalfDays, jQuery.proxy(this._renderHalfDayCalendarEvent,this));
	// Render overlap
	if( this.getShowOverlapIndicator()){
		for( var id in this._oDaysOverlap ){
			if( this._oDaysOverlap[id] != undefined && this._oDaysOverlap[id] > 1 ){
				var $div = jQuery.sap.byId("overlap-"+id);
				$div.css("background-color",sap.ui.core.theming.Parameters.get("sapMeOverlapCalendarIndicator"));
				$div.css("border-right","1px solid " + sap.ui.core.theming.Parameters.get("sapMeOverlapCalendarIndicator"));
			}		
		}
	};
	// Test if we reach the end
	if( this._firstDate && this._lastDate){
		var currentDatePlus7 = this._getFirstDateDisplayed();
		currentDatePlus7.setDate(currentDatePlus7.getDate()+7);
		var currentDateEndMinus7 = this._getLastDateDisplayed();
		currentDateEndMinus7.setDate( currentDateEndMinus7.getDate() - 7 );
		if( (this._dayIsBefore(this._lastDate, currentDatePlus7) )){
			this.fireEndOfData({before:false});
		} else if( this._dayIsAfter(this._firstDate,currentDateEndMinus7)){
			this.fireEndOfData({before:true});
		}
	}
};

sap.me.OverlapCalendar.prototype._addToDayOverlap = function( dayId ){
	if( this._oDaysOverlap[dayId]==undefined){
		this._oDaysOverlap[dayId] = 0;
	}
	this._oDaysOverlap[dayId]++;
};

sap.me.OverlapCalendar.prototype._getDaysOffset = function( firstDate, secondDate ){
    return Math.abs(this._getDaysDifference(firstDate,secondDate));
};

sap.me.OverlapCalendar.prototype._getDaysDifference = function( firstDate, secondDate ){
	// The number of milliseconds in one day
    var ONE_DAY = 1000 * 60 * 60 * 24;

    // Convert both dates to milliseconds
    var date1_ms = firstDate.getTime();
    var date2_ms = secondDate.getTime();

    // Calculate the difference in milliseconds
    var difference_ms = date1_ms - date2_ms;
    
    // Convert back to days and return
    return Math.round(difference_ms/ONE_DAY);
};

sap.me.OverlapCalendar.prototype._dayIsAfter = function( date, dateToCompare ){
	return (this._getDaysDifference(date, dateToCompare) > 0 ); 
};


sap.me.OverlapCalendar.prototype._dayIsBefore= function( date, dateToCompare ){
	return (this._getDaysDifference(date, dateToCompare) < 0 ); 
};

sap.me.OverlapCalendar.prototype._renderHalfDayCalendarEvent = function( key, aHalfDaysEvent ){
	var e = aHalfDaysEvent[0];
	var $div = jQuery.sap.byId(key);
	var t = e.getType();
	var b = (jQuery.inArray(t,this._typeWithBgImages) > -1 );
	$div.addClass("sapMeOverlapCalendarDayWithHalf");
	$div.append("<div class='sapMeOverlapCalendarHalfDay sapMeOverlapCalendarType"+t+"HalfDayStart'></div>");
	var dayWidth = (100 / (this.getCalendar().getWeeksPerRow() * 7));
	$div.children(":first").width(dayWidth+"%").height(this.getCalendar().getDayHeight());
	if( aHalfDaysEvent.length > 1 ){
		var e2 = aHalfDaysEvent[1];
		var t2 = e2.getType();
		$div.append("<div class='sapMeOverlapCalendarHalfDay sapMeOverlapCalendarType"+t2+"HalfDayEnd'></div>");
	}else if( b ){
		$div.append("<div class='sapMeOverlapCalendarHalfDay sapMeOverlapCalendarTypeHalfDayEnd'></div>");
	}
	$div.children(":last").width(dayWidth+"%").height(this.getCalendar().getDayHeight());
};

sap.me.OverlapCalendar.prototype._renderCalendarEvent = function(index, oCalendarEvent){
	var startDate = new Date(oCalendarEvent.getStartDay());
	var endDate = new Date(oCalendarEvent.getEndDay());
	if( this._lastDate == undefined ){
		this._lastDate = endDate;
	}
	if( this._dayIsAfter(endDate, this._lastDate)){
		this._lastDate = endDate;
	};
	if( this._firstDate == undefined ){
		this._firstDate = startDate;
	}
	if( this._dayIsBefore(startDate, this._firstDate)){
		this._firstDate = startDate;
	}
	var currentDate = this._getFirstDateDisplayed();
	var lastDate = this._getLastDateDisplayed();
	if( (!this._dayIsBefore(endDate,currentDate)) && (!this._dayIsAfter(startDate,lastDate))){
		var row = oCalendarEvent.getRow();
		var labelDivId = this.getId()+"-row-"+row+"-lbls";
		var $labelDiv = jQuery.sap.byId(labelDivId);
		var date = this._dayIsAfter( startDate, currentDate) ? startDate : currentDate;
		endDate = this._dayIsAfter(endDate, lastDate ) ? lastDate : endDate;
		var nbOfDays = this._getDaysOffset( date, endDate ) +1;
		var nbOfDaysOffset = this._getDaysOffset( currentDate, date );
		var type = oCalendarEvent.getTypeName();
		var css = "sapMeOverlapCalendarType"+oCalendarEvent.getType();
		var $div=undefined;
		var id;
		if( oCalendarEvent.getHalfDay()===true){

			id = this._getDayId(date);
			var rowId = row+"-"+id;
			if( this._mHalfDays[rowId] == undefined ){
				this._mHalfDays[rowId] = [];
				$div = jQuery.sap.byId(rowId);
			}
			this._mHalfDays[rowId].push(oCalendarEvent);
		} else {
			while( (this._getDaysDifference(date, endDate)<=0) ){
				id = this._getDayId(date);
				this._addToDayOverlap(id);
				$div = jQuery.sap.byId(row+"-"+id);
				$div.addClass(css);
				date.setDate(date.getDate()+1);
			}
		}
		if( $div != undefined) {
			// ensure the maximum width of the labels DIV is the calendar's width.
			$labelDiv.width(this.getWidth());
			$labelDiv.append("<label dir='Inherit' id='lbl"+$div.attr("id")+"'>"+type+"</label>");
			var $lbl =$labelDiv.children('#lbl'+$div.attr("id"));
			$lbl.addClass("sapMeOverlapCalendarTypeLbl sapMLabel");
			var dayWidth = (100 / (this.getCalendar().getWeeksPerRow() * 7));
			var width = (nbOfDays * dayWidth);
			$lbl.width( width+"%");
			var offset = (nbOfDaysOffset * dayWidth);
			var m = (nbOfDaysOffset == 0 ) ? 1 : .5;
			var leftOffset = offset+"%";
			$lbl.css("left",leftOffset);
			$lbl.css("padding-left",m+"rem");
		}
		
	};
};

sap.me.OverlapCalendar.prototype._parseCalendarEvent = function( i, oCalendarEvent ){
	var row = oCalendarEvent.getRow();
	if( row != -1 ){
		if( oCalendarEvent.getName() != undefined){
			if( this._aRows[row] == undefined && oCalendarEvent.getName() != ""){
				this._aRows[row] = oCalendarEvent.getName();
			}
		}else{
			// TODO : Log error
		};
	}else{
		// TODO : Log error
	};
};

sap.me.OverlapCalendar.prototype._getLabelForRow = function( index ){
	return this._getLabel( this._aRows[index],"nameLabels").addStyleClass("sapMeOverlapCalendarNameLbl");
};

sap.me.OverlapCalendar.prototype._getLabel = function( sText, sAggregationName ){
	var l = new sap.m.Label({text:sText});
	this.addAggregation(sAggregationName,l,true);
	return l;
};

}; // end of sap/me/OverlapCalendar.js
if ( !jQuery.sap.isDeclared('sap.me.OverlapCalendarEvent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.me.OverlapCalendarEvent.
jQuery.sap.declare("sap.me.OverlapCalendarEvent");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new OverlapCalendarEvent.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getStartDay startDay} : string</li>
 * <li>{@link #getEndDay endDay} : string</li>
 * <li>{@link #getRelevant relevant} : boolean</li>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getTypeName typeName} : string</li>
 * <li>{@link #getHalfDay halfDay} : boolean (default: false)</li>
 * <li>{@link #getRow row} : int (default: -1)</li>
 * <li>{@link #getName name} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represent the data of an event for the overlap calendar
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.me.OverlapCalendarEvent
 */
sap.ui.core.Element.extend("sap.me.OverlapCalendarEvent", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.me",
	properties : {
		"startDay" : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
		"endDay" : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
		"relevant" : {type : "boolean", group : "Misc", defaultValue : null, bindable : "bindable"},
		"type" : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
		"typeName" : {type : "string", group : "Appearance", defaultValue : null, bindable : "bindable"},
		"halfDay" : {type : "boolean", group : "Data", defaultValue : false, bindable : "bindable"},
		"row" : {type : "int", group : "Data", defaultValue : -1, bindable : "bindable"},
		"name" : {type : "string", group : "Misc", defaultValue : null, bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.me.OverlapCalendarEvent with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.me.OverlapCalendarEvent.extend
 * @function
 */


/**
 * Getter for property <code>startDay</code>.
 * The first day of the event
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>startDay</code>
 * @public
 * @name sap.me.OverlapCalendarEvent#getStartDay
 * @function
 */

/**
 * Setter for property <code>startDay</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStartDay  new value for property <code>startDay</code>
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#setStartDay
 * @function
 */


/**
 * Binder for property <code>startDay</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#bindStartDay
 * @function
 */

/**
 * Unbinder for property <code>startDay</code>.
 *
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#unbindStartDay
 * @function
 */


/**
 * Getter for property <code>endDay</code>.
 * Last day of the event
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>endDay</code>
 * @public
 * @name sap.me.OverlapCalendarEvent#getEndDay
 * @function
 */

/**
 * Setter for property <code>endDay</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sEndDay  new value for property <code>endDay</code>
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#setEndDay
 * @function
 */


/**
 * Binder for property <code>endDay</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#bindEndDay
 * @function
 */

/**
 * Unbinder for property <code>endDay</code>.
 *
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#unbindEndDay
 * @function
 */


/**
 * Getter for property <code>relevant</code>.
 * Indicates if this elements is relevant to be consider in the overlap
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>relevant</code>
 * @public
 * @name sap.me.OverlapCalendarEvent#getRelevant
 * @function
 */

/**
 * Setter for property <code>relevant</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bRelevant  new value for property <code>relevant</code>
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#setRelevant
 * @function
 */


/**
 * Binder for property <code>relevant</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#bindRelevant
 * @function
 */

/**
 * Unbinder for property <code>relevant</code>.
 *
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#unbindRelevant
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type of the event. Display in the second label (no overlap)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.me.OverlapCalendarEvent#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#setType
 * @function
 */


/**
 * Binder for property <code>type</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#bindType
 * @function
 */

/**
 * Unbinder for property <code>type</code>.
 *
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#unbindType
 * @function
 */


/**
 * Getter for property <code>typeName</code>.
 * The CSS class to use
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>typeName</code>
 * @public
 * @name sap.me.OverlapCalendarEvent#getTypeName
 * @function
 */

/**
 * Setter for property <code>typeName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTypeName  new value for property <code>typeName</code>
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#setTypeName
 * @function
 */


/**
 * Binder for property <code>typeName</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#bindTypeName
 * @function
 */

/**
 * Unbinder for property <code>typeName</code>.
 *
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#unbindTypeName
 * @function
 */


/**
 * Getter for property <code>halfDay</code>.
 * Is this half a day
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>halfDay</code>
 * @public
 * @name sap.me.OverlapCalendarEvent#getHalfDay
 * @function
 */

/**
 * Setter for property <code>halfDay</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHalfDay  new value for property <code>halfDay</code>
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#setHalfDay
 * @function
 */


/**
 * Binder for property <code>halfDay</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#bindHalfDay
 * @function
 */

/**
 * Unbinder for property <code>halfDay</code>.
 *
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#unbindHalfDay
 * @function
 */


/**
 * Getter for property <code>row</code>.
 * Id of the row on which to place this event
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>row</code>
 * @public
 * @name sap.me.OverlapCalendarEvent#getRow
 * @function
 */

/**
 * Setter for property <code>row</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iRow  new value for property <code>row</code>
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#setRow
 * @function
 */


/**
 * Binder for property <code>row</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#bindRow
 * @function
 */

/**
 * Unbinder for property <code>row</code>.
 *
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#unbindRow
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * Name of the row
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.me.OverlapCalendarEvent#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#setName
 * @function
 */


/**
 * Binder for property <code>name</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#bindName
 * @function
 */

/**
 * Unbinder for property <code>name</code>.
 *
 * @return {sap.me.OverlapCalendarEvent} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.OverlapCalendarEvent#unbindName
 * @function
 */


// Start of sap/me/OverlapCalendarEvent.js
///**
// * This file defines behavior for the control,
// */
//sap.me.OverlapCalendarEvent.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap/me/OverlapCalendarEvent.js
if ( !jQuery.sap.isDeclared('sap.me.ProgressIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.me.ProgressIndicator.
jQuery.sap.declare("sap.me.ProgressIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ProgressIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getBarColor barColor} : sap.ui.core.BarColor (default: sap.ui.core.BarColor.NEUTRAL)</li>
 * <li>{@link #getDisplayValue displayValue} : string (default: '0%')</li>
 * <li>{@link #getPercentValue percentValue} : int (default: 0)</li>
 * <li>{@link #getShowValue showValue} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Shows the progress of a process in a graphical way. The indicator can be displayed with or without numerical values.
 * The filling can be displayed in color only, or additionally with the percentage rate. The indicator status can be interactive.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.me.ProgressIndicator
 */
sap.ui.core.Control.extend("sap.me.ProgressIndicator", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.me",
	properties : {
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"barColor" : {type : "sap.ui.core.BarColor", group : "Appearance", defaultValue : sap.ui.core.BarColor.NEUTRAL},
		"displayValue" : {type : "string", group : "Appearance", defaultValue : '0%'},
		"percentValue" : {type : "int", group : "Data", defaultValue : 0},
		"showValue" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
	}
}});


/**
 * Creates a new subclass of class sap.me.ProgressIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.me.ProgressIndicator.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.me.ProgressIndicator#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.me.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.ProgressIndicator#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.me.ProgressIndicator#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.me.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.ProgressIndicator#setEnabled
 * @function
 */


/**
 * Getter for property <code>barColor</code>.
 * The color of the bar. Enumeration sap.ui.core.BarColor provides CRITICAL (yellow), NEGATIVE (red), POSITIVE (green), NEUTRAL (blue) (default value).
 *
 * Default value is <code>NEUTRAL</code>
 *
 * @return {sap.ui.core.BarColor} the value of property <code>barColor</code>
 * @public
 * @name sap.me.ProgressIndicator#getBarColor
 * @function
 */

/**
 * Setter for property <code>barColor</code>.
 *
 * Default value is <code>NEUTRAL</code> 
 *
 * @param {sap.ui.core.BarColor} oBarColor  new value for property <code>barColor</code>
 * @return {sap.me.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.ProgressIndicator#setBarColor
 * @function
 */


/**
 * Getter for property <code>displayValue</code>.
 * The text value to be displayed in the bar.
 *
 * Default value is <code>0%</code>
 *
 * @return {string} the value of property <code>displayValue</code>
 * @public
 * @name sap.me.ProgressIndicator#getDisplayValue
 * @function
 */

/**
 * Setter for property <code>displayValue</code>.
 *
 * Default value is <code>0%</code> 
 *
 * @param {string} sDisplayValue  new value for property <code>displayValue</code>
 * @return {sap.me.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.ProgressIndicator#setDisplayValue
 * @function
 */


/**
 * Getter for property <code>percentValue</code>.
 * The numerical value for the displayed length of the progress bar.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>percentValue</code>
 * @public
 * @name sap.me.ProgressIndicator#getPercentValue
 * @function
 */

/**
 * Setter for property <code>percentValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iPercentValue  new value for property <code>percentValue</code>
 * @return {sap.me.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.ProgressIndicator#setPercentValue
 * @function
 */


/**
 * Getter for property <code>showValue</code>.
 * Specifies whether the current value shall be rendered inside the bar.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showValue</code>
 * @public
 * @name sap.me.ProgressIndicator#getShowValue
 * @function
 */

/**
 * Setter for property <code>showValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowValue  new value for property <code>showValue</code>
 * @return {sap.me.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.ProgressIndicator#setShowValue
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the control.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.me.ProgressIndicator#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.me.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.ProgressIndicator#setWidth
 * @function
 */


// Start of sap/me/ProgressIndicator.js

sap.me.ProgressIndicator.prototype.setEndBar = function () {

	var widthBar = this.getPercentValue();
	var widthBorder;
	var sBarColor = this.getBarColor();
	var time;

	this.oBar  = jQuery.sap.domById(this.getId() + '-bar');
	this.oEnd  = jQuery.sap.domById(this.getId() + '-end');
	this.oBox  = jQuery.sap.domById(this.getId() + '-box');

	jQuery(this.oEnd).removeClass('sapUIMeProgIndEndHidden');
 	jQuery(this.oEnd).addClass('sapUIMeProgIndEnd');

	if (widthBar > 100) {
		widthBorder = (10000 / widthBar) + '%';
	}
	else {
		widthBorder = '100%';
	}

	if (widthBar > 100) {
		time = (widthBar - 100) * 20;
	}
	else {
		time = (100 - widthBar) * 20;
	}

	jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');
 	jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
	jQuery(this.oBar).animate({width: widthBar + '%'}, time, 'linear');

	if(!this.oThis){
		this.oThis = jQuery.sap.byId(this.getId());
	}

};

sap.me.ProgressIndicator.prototype.setEndBarGoesBack = function (iPercentValue) {

	var widthBar = this.getPercentValue();
	var widthBorder;
	var sBarColor = this.getBarColor();
	var time;

	this.oBar  = jQuery.sap.domById(this.getId() + '-bar');
	this.oEnd  = jQuery.sap.domById(this.getId() + '-end');
	this.oBox  = jQuery.sap.domById(this.getId() + '-box');

	if (iPercentValue > 100) {
		widthBorder = (10000 / iPercentValue) + '%';
	}
	else {
		widthBorder = '100%';
	}

 	jQuery(this.oEnd).removeClass('sapUIMeProgIndEnd');
 	jQuery(this.oEnd).addClass('sapUIMeProgIndEndHidden');

	if (widthBar > 100) {
		time = (widthBar - 100) * 20;
	}
	else {
		time = (100 - widthBar) * 20;
	}

	jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');
	jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
 	jQuery(this.oBar).animate({width: widthBar + '%'}, time, 'linear');

	if(!this.oThis){
		this.oThis = jQuery.sap.byId(this.getId());
	}

};

/**
 * Property setter for the PercentValue
 * A new rendering is not necessary, only the bar has to be moved.
 *
 * @param iPercentValue
 * @return {sap.me.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.me.ProgressIndicator.prototype.setPercentValue = function(iPercentValue) {

	var widthBar = this.getPercentValue();
	var widthBorder;
	var sBarColor = this.getBarColor();

	this.oBar  = jQuery.sap.domById(this.getId() + '-bar');
	this.oEnd  = jQuery.sap.domById(this.getId() + '-end');
	this.oBox  = jQuery.sap.domById(this.getId() + '-box');

	var that = this;
	var time;

	if (iPercentValue < 0) {
		iPercentValue = 0;
	}

	if (iPercentValue > 100) {
		widthBorder = (10000 / iPercentValue) + '%';
	}
	else {
		widthBorder = '100%';
	}

	if(!this.oBar){
		// Not already rendered -> return and render
		time = iPercentValue * 20;
		this.setProperty('percentValue', iPercentValue, true); // No re-rendering!
		jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear');
		return this;
	}

	if (iPercentValue > 100 && widthBar <= 100) {
		time = (100 - widthBar) * 20;
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBar).animate({width: '100%'}, time, 'linear', function() {
		that.setEndBar();
		});
	}
	else if (iPercentValue <= 100 && widthBar > 100) {
		time = (widthBar - 100) * 20;
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBar).animate({width: '100%'}, time, 'linear', function() {
		that.setEndBarGoesBack();
		});
	}
	else if (iPercentValue > 100 && widthBar > 100) {
		if (iPercentValue > widthBar) {
			time = (iPercentValue - widthBar) * 20;
		}
		else {
			time = (widthBar - iPercentValue) * 20;
		}
		widthBorder = (10000 / iPercentValue) + '%';
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again

		jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');
 	 	jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
		jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear', function() {
		});

		if(!this.oThis){
			this.oThis = jQuery.sap.byId(this.getId());
		}
 	}
	else {
		if (iPercentValue > widthBar) {
			time = (iPercentValue - widthBar) * 20;
		}
		else {
			time = (widthBar - iPercentValue) * 20;
		}
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear');
		if(!this.oThis){
			this.oThis = jQuery.sap.byId(this.getId());
		}
 	}

	return this;
};

}; // end of sap/me/ProgressIndicator.js
if ( !jQuery.sap.isDeclared('sap.me.TabContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.me.TabContainer.
jQuery.sap.declare("sap.me.TabContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TabContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelectedTab selectedTab} : int</li>
 * <li>{@link #getBadgeInfo badgeInfo} : int</li>
 * <li>{@link #getBadgeNotes badgeNotes} : int</li>
 * <li>{@link #getBadgeAttachments badgeAttachments} : int</li>
 * <li>{@link #getBadgePeople badgePeople} : int</li>
 * <li>{@link #getExpandable expandable} : boolean (default: true)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContentInfo contentInfo} : sap.ui.core.Control</li>
 * <li>{@link #getContentAttachments contentAttachments} : sap.ui.core.Control</li>
 * <li>{@link #getContentNotes contentNotes} : sap.ui.core.Control</li>
 * <li>{@link #getContentPeople contentPeople} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.me.TabContainer#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.me.TabContainer#event:expand expand} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.me.TabContainer#event:collapse collapse} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The TabContainer allow to stack 1 to 4 contents in a
 * view with corresponding icons
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.me.TabContainer
 */
sap.ui.core.Control.extend("sap.me.TabContainer", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.me",
	properties : {
		"selectedTab" : {type : "int", group : "Data", defaultValue : null},
		"badgeInfo" : {type : "int", group : "Data", defaultValue : null},
		"badgeNotes" : {type : "int", group : "Data", defaultValue : null},
		"badgeAttachments" : {type : "int", group : "Data", defaultValue : null},
		"badgePeople" : {type : "int", group : "Data", defaultValue : null},
		"expandable" : {type : "boolean", group : "Misc", defaultValue : true},
		"expanded" : {type : "boolean", group : "Misc", defaultValue : true},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
    	"tabs" : {type : "sap.ui.core.Icon", multiple : true, singularName : "tab", visibility : "hidden"}, 
    	"contentInfo" : {type : "sap.ui.core.Control", multiple : false}, 
    	"contentAttachments" : {type : "sap.ui.core.Control", multiple : false}, 
    	"contentNotes" : {type : "sap.ui.core.Control", multiple : false}, 
    	"contentPeople" : {type : "sap.ui.core.Control", multiple : false}, 
    	"badges" : {type : "sap.ui.core.Control", multiple : true, singularName : "badge", visibility : "hidden"}
	},
	events : {
		"select" : {allowPreventDefault : true}, 
		"expand" : {}, 
		"collapse" : {}
	}
}});


/**
 * Creates a new subclass of class sap.me.TabContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.me.TabContainer.extend
 * @function
 */

sap.me.TabContainer.M_EVENTS = {'select':'select','expand':'expand','collapse':'collapse'};


/**
 * Getter for property <code>selectedTab</code>.
 * Return the index of the selected tab
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>selectedTab</code>
 * @public
 * @name sap.me.TabContainer#getSelectedTab
 * @function
 */

/**
 * Setter for property <code>selectedTab</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iSelectedTab  new value for property <code>selectedTab</code>
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setSelectedTab
 * @function
 */


/**
 * Getter for property <code>badgeInfo</code>.
 * The number to display in the badge for the info tab
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>badgeInfo</code>
 * @public
 * @name sap.me.TabContainer#getBadgeInfo
 * @function
 */

/**
 * Setter for property <code>badgeInfo</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iBadgeInfo  new value for property <code>badgeInfo</code>
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setBadgeInfo
 * @function
 */


/**
 * Getter for property <code>badgeNotes</code>.
 * The number to display in the badge for the notes tab
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>badgeNotes</code>
 * @public
 * @name sap.me.TabContainer#getBadgeNotes
 * @function
 */

/**
 * Setter for property <code>badgeNotes</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iBadgeNotes  new value for property <code>badgeNotes</code>
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setBadgeNotes
 * @function
 */


/**
 * Getter for property <code>badgeAttachments</code>.
 * The number to display in the badge for the attachments tab
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>badgeAttachments</code>
 * @public
 * @name sap.me.TabContainer#getBadgeAttachments
 * @function
 */

/**
 * Setter for property <code>badgeAttachments</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iBadgeAttachments  new value for property <code>badgeAttachments</code>
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setBadgeAttachments
 * @function
 */


/**
 * Getter for property <code>badgePeople</code>.
 * The number to display in the badge for the people tab
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>badgePeople</code>
 * @public
 * @name sap.me.TabContainer#getBadgePeople
 * @function
 */

/**
 * Setter for property <code>badgePeople</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iBadgePeople  new value for property <code>badgePeople</code>
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setBadgePeople
 * @function
 */


/**
 * Getter for property <code>expandable</code>.
 * Indicates if the tab can be collapsed and expanded
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>expandable</code>
 * @public
 * @name sap.me.TabContainer#getExpandable
 * @function
 */

/**
 * Setter for property <code>expandable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bExpandable  new value for property <code>expandable</code>
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setExpandable
 * @function
 */


/**
 * Getter for property <code>expanded</code>.
 * Indicates if the actual tab is expanded or not
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * @name sap.me.TabContainer#getExpanded
 * @function
 */

/**
 * Setter for property <code>expanded</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bExpanded  new value for property <code>expanded</code>
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setExpanded
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * setter for visible property
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.me.TabContainer#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>contentInfo</code>.<br/>
 * The info tab
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.me.TabContainer#getContentInfo
 * @function
 */


/**
 * Setter for the aggregated <code>contentInfo</code>.
 * @param oContentInfo {sap.ui.core.Control}
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setContentInfo
 * @function
 */
	

/**
 * Destroys the contentInfo in the aggregation 
 * named <code>contentInfo</code>.
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#destroyContentInfo
 * @function
 */


/**
 * Getter for aggregation <code>contentAttachments</code>.<br/>
 * The attachments tab
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.me.TabContainer#getContentAttachments
 * @function
 */


/**
 * Setter for the aggregated <code>contentAttachments</code>.
 * @param oContentAttachments {sap.ui.core.Control}
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setContentAttachments
 * @function
 */
	

/**
 * Destroys the contentAttachments in the aggregation 
 * named <code>contentAttachments</code>.
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#destroyContentAttachments
 * @function
 */


/**
 * Getter for aggregation <code>contentNotes</code>.<br/>
 * The notes tab
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.me.TabContainer#getContentNotes
 * @function
 */


/**
 * Setter for the aggregated <code>contentNotes</code>.
 * @param oContentNotes {sap.ui.core.Control}
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setContentNotes
 * @function
 */
	

/**
 * Destroys the contentNotes in the aggregation 
 * named <code>contentNotes</code>.
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#destroyContentNotes
 * @function
 */


/**
 * Getter for aggregation <code>contentPeople</code>.<br/>
 * The people tab
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.me.TabContainer#getContentPeople
 * @function
 */


/**
 * Setter for the aggregated <code>contentPeople</code>.
 * @param oContentPeople {sap.ui.core.Control}
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#setContentPeople
 * @function
 */
	

/**
 * Destroys the contentPeople in the aggregation 
 * named <code>contentPeople</code>.
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#destroyContentPeople
 * @function
 */


/**
 * Indicates that the selected tab has changed
 *  
 *
 * @name sap.me.TabContainer#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.me.TabContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.me.TabContainer</code>.<br/> itself. 
 *  
 * Indicates that the selected tab has changed
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.me.TabContainer</code>.<br/> itself.
 *
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.me.TabContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.me.TabContainer#fireSelect
 * @function
 */


/**
 * Indicates that the tab will expand 
 *
 * @name sap.me.TabContainer#expand
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'expand' event of this <code>sap.me.TabContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.me.TabContainer</code>.<br/> itself. 
 *  
 * Indicates that the tab will expand 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.me.TabContainer</code>.<br/> itself.
 *
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#attachExpand
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'expand' event of this <code>sap.me.TabContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#detachExpand
 * @function
 */

/**
 * Fire event expand to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.me.TabContainer#fireExpand
 * @function
 */


/**
 * Indicates that the tab will collapse 
 *
 * @name sap.me.TabContainer#collapse
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'collapse' event of this <code>sap.me.TabContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.me.TabContainer</code>.<br/> itself. 
 *  
 * Indicates that the tab will collapse 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.me.TabContainer</code>.<br/> itself.
 *
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#attachCollapse
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'collapse' event of this <code>sap.me.TabContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.me.TabContainer#detachCollapse
 * @function
 */

/**
 * Fire event collapse to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.me.TabContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.me.TabContainer#fireCollapse
 * @function
 */


// Start of sap/me/TabContainer.js
///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.me.TabContainer.prototype.init = function() {
	this.addAggregation("tabs",this._createButton("Info"));
	this.addAggregation("tabs",this._createButton("Notes"));
	this.addAggregation("tabs",this._createButton("Attachments"));
	this.addAggregation("tabs",this._createButton("People"));
	sap.ui.core.IconPool.insertFontFaceStyle();
	this._bFirstRendering = true;
};

sap.me.TabContainer.prototype.setBadgeInfo = function( iValue ){
	this._setBadgeLabelByName("badgeInfo",iValue);
};

sap.me.TabContainer.prototype.setBadgeAttachments = function( iValue ){
	this._setBadgeLabelByName("badgeAttachments",iValue);
};
sap.me.TabContainer.prototype.setBadgeNotes = function( iValue ){
	this._setBadgeLabelByName("badgeNotes",iValue);
};
sap.me.TabContainer.prototype.setBadgePeople = function( iValue ){
	this._setBadgeLabelByName("badgePeople",iValue);
};
sap.me.TabContainer.prototype.onBeforeRendering = function() {
	if (this.getSelectedTab() == undefined) {
		this.setProperty("selectedTab", 0, true); // no invalidation when rendering phase has started
	}
};


sap.me.TabContainer.prototype._setBadgeLabelByName = function(iName,iValue){
	var label = sap.ui.getCore().byId(this.getId()+"-"+iName);
	label.setText(iValue);
	this.setProperty(iName,iValue);
	label.toggleStyleClass("sapUIMeTabContainerHiddenBadges" , (iValue == 0) );
};
sap.me.TabContainer.prototype._placeElements = function(){
	// Place the arrow
	var $arrow = jQuery.sap.byId(this.getId() + "-arrow");
	var oBtn = this.getAggregation("tabs")[this.getSelectedTab()];
	if (oBtn && (oBtn.$().outerWidth() > 8)) {
		var iLeft = parseFloat(oBtn.$()[0].offsetLeft) + parseFloat(oBtn.$().outerWidth() / 2) - parseFloat($arrow.width() / 2);
		$arrow.css("left", iLeft + "px");
	}
};


sap.me.TabContainer.prototype.onAfterRendering = function() {
	this.setProperty("expanded", true, true);
	if( this._bFirstRendering){
		this._bFirstRendering = false;
		setTimeout(jQuery.proxy(this._placeElements,this),300); // Timeout to make sure the icon are placed
	} else {
		this._placeElements();
	}
};

sap.me.TabContainer.prototype.onThemeChanged  = function() {
	this._placeElements();
};


sap.me.TabContainer.prototype.onTransitionEnded = function() {
	var $container = jQuery.sap.byId(this.getId() + "-container");
	if( this.getExpanded()){ // expanding
		jQuery.sap.byId(this.getId() + "-arrow").show();
		$container.css("display" , "block");
		this.$().find(".sapUIMeTabContainerContent").removeClass("sapUIMeTabContainerContentClosed");
	}else{ // collapsing
		$container.css("display" , "none");
		this.$().find(".sapUIMeTabContainerContent").addClass("sapUIMeTabContainerContentClosed");
	}
};

sap.me.TabContainer.prototype.toggleExpandCollapse = function() {
	var bExpand = !this.getExpanded();
	var $container = jQuery.sap.byId(this.getId() + "-container");

	var $arrow = jQuery.sap.byId(this.getId() + "-arrow");
	if (bExpand) {
		this.$().find(".sapUIMeTabContainerButtons").children().filter(":eq(" + this.getSelectedTab() + ")").addClass("sapUIMeTabContainerTabSelected");
		$container.slideDown('400', jQuery.proxy(this.onTransitionEnded, this));
		this.fireExpand();
	} else {
		$arrow.hide();
		this.$().find(".sapUIMeTabContainerTabSelected").removeClass("sapUIMeTabContainerTabSelected");
		$container.slideUp('400', jQuery.proxy(this.onTransitionEnded, this));
		this.fireCollapse();
	}
	this.setProperty("expanded", bExpand, true);
};

sap.me.TabContainer.prototype.onButtonTap = function(oEvent) {
	var oBtn = oEvent.getSource();
	var iIndex = this.indexOfAggregation("tabs", oBtn);
	if (iIndex == this.getSelectedTab() && this.getExpandable()) {

		this.toggleExpandCollapse();
	} else {

		this.setProperty("expanded", true, true);

		var oBtnID = oBtn.getId();
		var oContent = this._getContentForBtn(oBtnID);
		if (oContent) {

			if (this.fireSelect()) {
				this.setSelectedTab(iIndex); // note: this currently rerenders. When this is changed not to rerender, then remember to also update the selected-tab CSS class!
			}
		}

	}

};

sap.me.TabContainer.prototype._getContentForBtn = function(oBtnID) {
	var id = this.getId() + "-";
	var contentName = oBtnID.substr(oBtnID.indexOf(id) + id.length);
	return this.getAggregation(contentName);
};
sap.me.TabContainer.prototype._getBagdeForBtn = function(oBtnID) {
	var id = this.getId() + "-content";
	var badgeName = oBtnID.substr(oBtnID.indexOf(id) + id.length);
	badgeName.charAt(0).toUpperCase();
	badgeName = "badge"+badgeName;
	return this.getProperty(badgeName);
};


sap.me.TabContainer.prototype._getScrollContainer = function(oContent) {
	return new sap.m.ScrollContainer({
		content : oContent
	});
};
sap.me.TabContainer.prototype._createButton = function(sId) {
	var sIconName = sap.ui.core.theming.Parameters.get("sapMeTabIcon"+sId);
	var sURI = sap.ui.core.IconPool.getIconURI(sIconName);
	var sColor = sap.ui.core.theming.Parameters.get("sapMeTabColor"+sId);
	var oBtn = new sap.ui.core.Icon(this.getId() + '-content' + sId,{
	       src: sURI,
	       backgroundColor: sColor,
	       activeColor :  sap.ui.core.theming.Parameters.get("sapUiIconInverted")
	});
	oBtn.addStyleClass("sapUIMeTabContainerBtn");
	oBtn.addStyleClass("sapUIMeTabContainerBtn"+sId);
	oBtn.attachPress(this.onButtonTap, this);
	
	var oLabel = new sap.m.Label(this.getId() + '-badge' + sId,{
		textAlign:"Center"

	});
	oLabel.addStyleClass("sapUIMeTabContainerBadge");
	oLabel.addStyleClass("sapUIMeTabContainerBadge"+sId);
	this.addAggregation("badges",oLabel);
	return oBtn;
};

}; // end of sap/me/TabContainer.js
